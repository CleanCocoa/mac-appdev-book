## Naive Event Handler

Somehow, the `BoxRepository` has to know about the user clicking a button, thus issuing the creation of a new `Box`. `BoxRepository` belongs to the domain, although the concrete `CoreDataBoxRepository` is part of infrastructure. It's part of infrastructure because the domain's clients shouldn't have knowledge about this implementation detail, even less so the domain.

The missing glue is between user interface and the domain. That's the application layer: the premier client to the domain.


### View Controllers don't have to belong to the Application Layer

Depending on how you create `NSViewController` subclasses, view controllers either belong to the application layer or to the user interface layer. I tend to write dumb view controllers which belong into the user interface layer, next to custom `NSView`s and Nib files. If view controllers become too clever, it's harder to add features or re-use user interface components. That's why I want to separate the UI from Core Data in the first place.

When view controllers are too dumb to perform interesting actions, they have to delegate this behavior to collaborators.

Think of view controllers as smart views rather than complex controllers. Unlike usual views, they can't display themselves. But they are a faÃ§ade to other user interface components, taking care of the set-up, layout, and basic event handling.

In other words, view controllers coordinate views to form a more complex user interface component. They aggregate their views's basic events and take care of sending more meaningful events to interested parties.

An event handler in the application layer is an interested party. It understands nothing about buttons and outlines. Instead, it answers questions like "How many `Item`s are there in this `Box`?" and takes care of events like "Create a new `Box`."

Handling events in the application layer instead of the view controller introduces the option to phrase the events in a way suitable to the task. You can refer to the **Ubiquituous Language** of your project to describe these events in code: talk in terms of "create `Box`" instead of "`addBoxButton` clicked".

### Leverage the Delegate Pattern

The delegate pattern is widespread in Apple's own framework. You implement a `NSTableViewDelegate` to handle `NSTableView`-specific events. You also need a `NSTableViewDataSource` to provide (initial) data to the table. The table _asks_ for this information. You don't have to shove it down its throat upon initialization. This way, the table can worry about performance issues like caching table cells and ask for parts of the data at your disposal only.

![20141125103816 Components  Event Handler](assets/20141125103816_components--event_handler.jpg)

It's pretty easy to add this to the code there is already.

    public protocol HandlesItemListEvents: class {
        func provisionNewBoxId() -> BoxId;
        func provisionNewItemId(inBox boxId: BoxId) -> ItemId;
    }

I tend to phrase protocols this way because it makes the role clear and reads pretty well:

    class BoxService: HandlesItemListEvents { /* ... */ }

How to name such **Application Services**?

I favor good names. Back in Java-land, the code was cluttered with `XYZService`s and `ABCManager`s. These nouns don't convey a lot of meaning. It requires knowlege of the **Ubiquituous Language** to come up with better names. Most of the really good names will be found in the domain, though. Even the domain will have services to carry out complex actions.

For example, the Word Counter domain includes a `Recorder` and various `Bookkeeper`s. The former takes care of the various ways to track words (all words, words per application, words in project files) while the latter holds on to the actual data in memory, incrementing counters.

The application layer is going to be pretty thin, so I don't mind resorting to the `XYZService` naming convention for now. I can change names later anyway:

    public class BoxAndItemService: HandlesItemListEvents {
        public func provisionNewBoxId() -> BoxId {
            let repository = ServiceLocator.boxRepository()
            let boxId = repository.nextId()
            let box = Box(boxId: boxId, title: "New Box")
        
            repository.addBox(box)
        
            return boxId
        }
    
        public func provisionNewItemId(inBox boxId: BoxId) -> ItemId {
            //FIXME: this is a stub
            return ItemId(0)
        }
    }
    
The implementation of `provisionNewBoxId` is easy. Provisioning items belonging to boxes will be a bit more intricate.

The functional test still fails because the `BoxAndItemService` is never actually loaded. Whichever object is responsible for creating the window must introduce this event handler to the view controller. Currently, that's the job of `AppDelegate`.

### Wire together existing components

`AppDelegate` sets up the view controller like this:

    lazy var windowController = ItemManagementWindowController()
    lazy var boxAndItemService = BoxAndItemService()
    
    func applicationDidFinishLaunching(aNotification: NSNotification) {
        windowController.eventHandler = boxAndItemService
        
        windowController.showWindow(self)
        windowController.window?.makeKeyAndOrderFront(self)
    }

`ItemManagementWindowController` simply passes the `BoxAndItemService` down to the `ItemViewController` which actually needs it.

    @IBAction public func addBox(sender: AnyObject) {
        if let eventHandler = self.eventHandler {
            let boxId = eventHandler.provisionNewBoxId()
            let box = BoxNode(boxId: boxId)
            let indexPath = NSIndexPath(index: nodeCount())
            itemsController.insertObject(box, atArrangedObjectIndexPath: indexPath)
            orderTree()
        }
    }

Now that `addBox(_:)` in `ItemViewController` depends on `eventHandler` being set, the tests have to provide it. The `AddingItemsTests` suite will use the actual `BoxAndItemService`, but the `ItemViewControllerTests` won't. They're unit tests. To make them pass, the unit tests will provide a `NullEventHandler`: a stub to satisfy the dependency.

    class EventHandlerStub: HandlesItemListEvents {
        func provisionNewBoxId() -> BoxId {
            return BoxId(0)
        }
    
        func provisionNewItemId(inBox boxId: BoxId) -> ItemId {
            return ItemId(0)
        }
    }

I would've added `EventHandlerStub` to `ItemViewController` directly as the default value of the `eventHandler` property. This way, I wouldn't need to conditionally unwrap the optional. (I don't like the additional level of nesting.) 

Since `eventHandler` is a weak reference only, it isn't possible to add a placeholder object with "null" behavior in `ItemViewController` directly. [**Null Object**s][nullobj] are pretty useful to avoid `nil` checks. My utter dislike for what conditionally unwrapping optionals does to my code is a strong motivation to employ **Null Object**s in Swift. This particular interface is heavy on the _query_ side of **CQRS** while **Null Object**s are better suited to stub-out _commands_.

To make the test pass, `CoreDataBoxRepository` needs a `count() -> Int` method:

    public func count() -> Int {
        let fetchRequest = NSFetchRequest(entityName: ManagedBox.entityName())
        fetchRequest.includesSubentities = false
        
        var error: NSError? = nil
        let count = managedObjectContext.countForFetchRequest(fetchRequest, error: &error)
        
        if count == NSNotFound {
            //FIXME: handle error
            return NSNotFound
        }
        
        return count
    }

Here, still, I don't handle errors. Why is that so? Because I don't have an actual application at my disposal which could respond to anything. I could either `fail()` and stop the application on such errors or implement my own error handling facilities. The latter is what I'll do in part 3.

Now all tests pass: new `Box`es are created and both stored and shown.[^1d4b7c3ffa9fbd71ee7d64e5aacab39446c90acd]

<!--ct: commit #1d4b7c3ffa9fbd71ee7d64e5aacab39446c90acd use application layer service to create Box objects into Core Data-->

[^1d4b7c3ffa9fbd71ee7d64e5aacab39446c90acd]: [commit 1d4b7c3](https://github.com/DivineDominion/mac-appdev-code/commit/1d4b7c3ffa9fbd71ee7d64e5aacab39446c90acd)

[nullobj]: http://en.wikipedia.org/wiki/Null_Object_pattern

### Adding `Item`s as Part of Their Larger Aggregate `Box`

Adding items takes a bit more lines to test, but it's nothing special:

    func testAddItem_WithBoxInRepo_CreatesItemBelowBox() {
        let existingId = BoxId(1337)
        ManagedBox.insertManagedBox(existingId, title: "irrelevant", inManagedObjectContext: context)
        XCTAssertEqual(boxRepository!.count(), 1, "repo contains a box")
    
        // When
        viewController!.addItem(self)
    
        // Then
        if let box: ManagedBox = allBoxes().first {
            XCTAssertEqual(box.items.count, 1, "contains an item")
        
            if let item: ManagedItem = box.items.anyObject() as? ManagedItem {
                XCTAssertEqual(item.title, "New Item")
                XCTAssertEqual(item.box, box)
            }
        } else {
            XCTFail("no boxes found")
        }
    }

Appending `ItemNode` to the current selection (or its parent) `BoxNode` works by finding the `BoxNode`'s index path. The associated `NSTreeNode` provides all details to obtain the `BoxId`.

    func appendItemNodeToBoxIndexPath(parentIndexPath: NSIndexPath) {
        let parentTreeNode = boxTreeNodeAtIndexPath(parentIndexPath)
        let itemIndexPath = indexPath(appendedToTreeNode: parentTreeNode)
        let item = itemNode(belowBoxTreeNode: parentTreeNode)
    
        itemsController.insertObject(item, atArrangedObjectIndexPath: itemIndexPath)
    }
    // ...
    func itemNode(belowBoxTreeNode boxTreeNode: NSTreeNode)-> ItemNode {
        let boxNode = boxTreeNode.representedObject as BoxNode
        let itemId = eventHandler.provisionNewItemId(inBox: boxNode.boxId)

        return ItemNode(itemId: itemId)
    }

Now that `ItemViewController` asks for a new `ItemId`, we could simply replicate `provisionNewBoxId()` and ask the `CoreDataItemRepository` for a new ID, insert it, and all is well.

    public func provisionNewItemId(inBox boxId: BoxId) -> ItemId {
        let repository = ServiceLocator.itemRepository()
        let itemId = repository.nextId()
        let item = Item(itemId: ItemId, title: "New Item")
    
        repository.addItem(item)
    
        return itemId
    }

Stop right there. This may be a mistake.

Think about the domain's specification. `Item`s are part of `Box`es. It doesn't make sense to create them in isolation. In fact, the code above wouldn't execute without errors because the Core Data `ManagedItem` definition declares the `box`-relationship must be set.

In Domain-Driven Design terms, `Box` is an **Aggregate Root**. It is responsible for managing its invariants and related entities. `Item`s are related entities: they have identity over time and across sessions. But in this scenario, they aren't to be managed independently from their respective `Box`es.

At the moment and with the current domain design in hand, it doesn't make sense to fetch `Item`s in isolation. That's not the case for the Word Counter. There, paths may belong to more than one project. It would make sense to fetch all paths and start file monitoring. In this example application, it doesn't make sense to fetch all `Item`s without their `Box`es. That's why I keep `Item` as a part of the `Box` aggregate.

Creating `Item`s thus becomes part of the boundary of `Box`.

    public func provisionNewItemId(inBox boxId: BoxId) -> ItemId? {
        let repository = ServiceLocator.boxRepository()
        if let box = repository.boxWithId(boxId) {
            let itemId = repository.nextItemId()
            box.addItem(itemId, title: "New Item")
            
            return itemId
        }

        return nil
    }

This aspect of the domain changes how to think about the box and item **Repositories**.

Until now, I had collection-oriented repositories in mind.[see Chapter 12, "Repositories"][#vernon2013ddd] You query the repository for objects, change them, and not worry about saving. The repository does it behind the scenes. If I worked with Core Data managed objects directly, that's exactly what would happen. But I don't, so I have to ensure that changes to a `Box` find their way to the Core Data store.

There's three options:

1. Change the way the **Repositories** work. Instead of collection-oriented, make them work persistence-oriented. This includes explicit calls to `save` methods, passing in `Box` or `Item`. Since I don't manipulate a SQL database directly, I have to map changes from `Box` and `Item`to `ManagedBox` and `ManagedItem` respectively.
2. Leverage KVO to track changes of `Box` objects and map changes to the underlying `ManagedBox`. Similar to (1), but without explicit calls to a `save` method.
3. Use `NSManagedObject` directly to manipulate the persisted data. Every change gets persisted automagically.

I think (1) is a waste of time in this case. (2) is a viable option I'll explore more. Discovering these difficulties in practice, I decide to take on (3) in another part, namely part 4.

#### Tracking `Box` changes from within `ManagedBox`

To leverage Key-Value Observing in Swift, I have to change `Box` to this:

    public class Box: NSObject {
        public let boxId: BoxId
        public dynamic var title: String
    
        public init(boxId: BoxId, title: String) {
            self.boxId = boxId
            self.title = title
        }
    }

`ManagedBox` observation is set up in a lazy property initializer. This way, the `Box` can use `ManagedBox`es values when it's requested. Since the Core Data managed object context keeps fetched values around until saving, subsequent fetch requests will produce the same `ManagedBox` and thus the same `Box`:

    private var kBoxContext = 0

    public class ManagedBox: NSManagedObject {
        // ...

        private var _box: Box?
        public lazy var box: Box = {
        
            let box = Box(boxId: self.boxId(), title: self.title)
            box.addObserver(self, forKeyPath: "title", options: .New, context: &kBoxContext)
        
            self._box = box
            return box
        }()
    
        public override func observeValueForKeyPath(keyPath: String, ofObject object: AnyObject, change: [NSObject : AnyObject], context: UnsafeMutablePointer<Void>) {
        
            if context != &kBoxContext {
                super.observeValueForKeyPath(keyPath, ofObject: object, change: change, context: context)
                return
            }
        
            if keyPath == "title" {
                self.title = change[NSKeyValueChangeNewKey] as String
            }
        }
    
        deinit {
            if let box = _box {
                box.removeObserver(self, forKeyPath: "title")
            }
        }
    }

This works pretty well for fetched boxes:

    public class CoreDataBoxRepository: NSObject, BoxRepository {
        // ...
        public func boxWithId(boxId: BoxId) -> Box? {
            if let managedBox = managedBoxWithUniqueId(boxId.identifier) {
                return managedBox.box
            }
        
            return nil
        }
    }

#### Populating the view with content from Core Data

To add an `Item` to a `Box`, the view controller has to know about items in the data store. Until now, the view always starts blank.

Showing the view and populating its data can be modeled as a use case: `ManageBoxesAndItems`. Another naming candidate is `ShowBoxManagementWindow` or similar to express the intent, but `ManageBoxesAndItems` better captures the user's intention.

    public class ManageBoxesAndItems {
        var windowController: ItemManagementWindowController!
        // ...
        
        public func showBoxManagementWindow() {
            let repository = ServiceLocator.boxRepository()
            let allBoxes = repository.boxes()
            let allBoxData = boxData(allBoxes)
        
            windowController.displayBoxData(allBoxData)
            
            showWindow()
        }
        
        func boxData(boxes: [Box]) -> [BoxData] {
            // Adapt each Box to BoxData, the view's Data Transfer Object
        }
    }

`BoxData` is (yet) another simple struct to pass values to the view, and another chance to be thankful for Swift:

    public struct BoxData {
        let boxId: BoxId
        let title: String
        let itemData: [ItemData]
    }

    public struct ItemData {
        let itemId: ItemId
        let title: String
    }

The view controller `ItemViewController` then creates `BoxNode`s and `ItemNode`s in its `displayBoxData`. The window controller simply forwards the message.

This simple use case-oriented **Application Service** object relieves the `AppDelegate` from a lot of responsibilities. To show the window at startup, it simply invokes the use case service:

    class AppDelegate: NSObject, NSApplicationDelegate {
        // ...
        lazy var manageBoxesAndItems: ManageBoxesAndItems! = ManageBoxesAndItems()
    
        func applicationDidFinishLaunching(aNotification: NSNotification) {
            ServiceLocator.sharedInstance.managedObjectContext = persistentStack.managedObjectContext
            manageBoxesAndItems.showBoxManagementWindow()
        }
    }

This works well in tests. And all of a sudden the application persists the user's changes -- at least when it comes to adding `Box`es.[^d8b64eabee134cd516b382956e2aa58c194d5886]

<!--ct: commits:
d8b64eabee134cd516b382956e2aa58c194d5886 prepare populating the view with data via use cases
b4c63ff803672889f7683aae72554d9538c7f335 make save-on-quit work; view-populating, too
6cfabcf026b516b69a30873aa30ea68de79a6aa9 refactor code
f9d96aa1f19db681ba654f2bdf067bd8a7edf08f remove CoreDataItemRepository
-->

Obtaining the `Box` via `ManagedBox` didn't re-create the associated items, yet. It's easily achieved via `map()`, though:

    let box = Box(boxId: self.boxId(), title: self.title)
    let managedItems = self.items.allObjects as [ManagedItem]
    let items = managedItems.map() { (item: ManagedItem) -> Item in
        return item.item
    }
    box.items = items

That's all there is to it to create, save, and show items with their default values. Changing the values has no lasting effect, though.


[^d8b64eabee134cd516b382956e2aa58c194d5886]: [commits d8b64ea](https://github.com/DivineDominion/mac-appdev-code/commit/d8b64eabee134cd516b382956e2aa58c194d5886),  [b4c63ff](https://github.com/DivineDominion/mac-appdev-code/commit/b4c63ff803672889f7683aae72554d9538c7f335), [6cfabcf](https://github.com/DivineDominion/mac-appdev-code/commit/6cfabcf026b516b69a30873aa30ea68de79a6aa9), and [f9d96aa](https://github.com/DivineDominion/mac-appdev-code/commit/f9d96aa1f19db681ba654f2bdf067bd8a7edf08f)

### Renaming Boxes and Items

There are two options I can think of to take note of changes to the view model, that is, `BoxNode` and `ItemNode` titles:

1. Leverage KVO in the view controller to notify the event handler, or
2. Use Swift property observers `willSet`/`didSet` to fire a message to any interested party.

The first approach sounds good because there's a single event handler, using the already established delegate pattern. The second approach takes far less boilerplate code to set up, and I don't need to worry about removing the observer upon item removal. On the downside, I have to send messages using the notification center. Who should subscribe to these? The view controller or the event handler?

In classic Model--View--Controller fashion,[^mvc] every view component has its own controller. One could say that the `didSet` property observer already is part of the controller. Why delegate it up to the list component's faÃ§ade, `ItemViewController`? Thus the objective is to send a change message to the event handler from the `didSet` property observer directly. I could set a (shared) `eventHandler` property to every `TreeNode` upon initialization and invoke `boxDidChange(_:BoxId, title:String)`, for example. The consequences are severe, though:

* `BoxNode` has to be representable in Objective-C, thus its `eventHandler` protocol has to be annotated `@objc`, too.
* The protocol, `HandlesItemListChanges`, cannot be Objective-C compatible if `BoxId` isn't.
* `BoxId` is a struct. It's a genuine value object. To make it Objective-C compatible, it has to become a class instead.

I don't want to water-down the existing design just for the sake of convenience. Instead, I opt in to delegate `didSet` messages up to the `ItemViewController`.

    public protocol HandlesItemListChanges: class {
        func treeNodeDidChange(treeNode: TreeNode, title: String)
    }

    public class BoxNode: NSObject, TreeNode {
        public dynamic var title: String = "New Box" {
            didSet {
                if let controller = self.eventHandler {
                    controller.treeNodeDidChange(self, title: title)
                }
            }
        }
        public weak var eventHandler: HandlesItemListChanges?
        // ...
    }

Until now, `BoxNode` did set up its own child nodes when it was reconstituted from `BoxData`. I move this part out into `ItemViewController` to set the `eventHandler` property to `self` there:

    public func displayBoxData(boxData: [BoxData]) {
        removeExistingNodes()
        for data in boxData {
            itemsController.addObject(boxNode(data))
        }
    }

    func removeExistingNodes() {
        itemsController.content = NSMutableArray()
    }
    
    func boxNode(boxData: BoxData) -> BoxNode {
        let boxNode = BoxNode(boxData: boxData)
        boxNode.eventHandler = self
        boxNode.children = itemNodes(boxData.itemData)
        
        return boxNode
    }
    
    func itemNodes(allItemData: [ItemData]) -> [ItemNode] {
        var result: [ItemNode] = allItemData.map() { (itemData: ItemData) -> ItemNode in
            self.itemNode(itemData)
        }
        return result
    }
    
    func itemNode(itemData: ItemData) -> ItemNode {
        let itemNode = ItemNode(itemData: itemData)
        itemNode.eventHandler = self
        
        return itemNode
    }

Another option is to pipe the value for every node's `eventHandler` upon reconstitution, so the method signature becomes `BoxNode.init(_: BoxData, eventHandler: HandlesItemListChanges?)`.

The **Application Service** is pretty simple, still:

    public class BoxAndItemService: HandlesItemListEvents {
        // ...
    
        public func boxDidChange(boxId: BoxId, title: String) {
            let repository = ServiceLocator.boxRepository()
        
            if let box = repository.boxWithId(boxId) {
                box.title = title
            }
        }
    }

Does phrasing it this way make sense, though?

Just try read it: "Box and item service handles item list events. Box did change to a new title. Set box title to the new title." When the box changed to a new title, change the title? Really?

The real `Box` _should_ change. The user-facing component _did_ change.

How wouly you phrase it?

I decide to use an active form for this method. Similar to `provisionNewBoxId`, this method will be called `changeBoxTitle`. This diverges from Cocoa naming conventions, but it makes more sense. An overall observation when looking at real _Domain-Driven Design_ project code is that the code reads well. I hope you agree that this is more important than adhering to naming conventions, especially if you don't expose a public API.[^f4abec848fdd107fff3d4badeaa83877bfaf930e]
<!--ct: commit: #f4abec848fdd107fff3d4badeaa83877bfaf930e persist title changes to Box -->


Similarily, I want `changeItemTitle` to look like this:

    public func changeItemTitle(itemId: ItemId, title: String, inBox boxId: BoxId) {
        let repository = ServiceLocator.boxRepository()
    
        if let box = repository.boxWithId(boxId) {
            if let item = box.itemWithId(itemId) {
                item.title = title
            }
        }
    }

To obtain the parent item's `BoxId`, I walk the tree controller's arranged objects to generate a collection of `BoxNode`s. Then, I let the `ItemNode` decide where it belongs: 

    public func parentBoxNode(inArray nodes: [BoxNode]) -> BoxNode? {
        for boxNode in nodes {
            if contains(boxNode.children as [ItemNode], self) {
                return boxNode
            }
        }
    
        return nil
    }

With these changes in place, the item title change test passes, too.

[^mvc]: Like, 1988-classic. See [Wikipedia's MVC history](http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller#History) for links to articles on the topic.

[^f4abec848fdd107fff3d4badeaa83877bfaf930e]: [commit f4abec8](https://github.com/DivineDominion/mac-appdev-code/commit/f4abec848fdd107fff3d4badeaa83877bfaf930e)


### Removing Items and Boxes

Adding this is pretty straight-forward now that changing is in place already. The interface I aim for is this:

    func removeBox(boxId: BoxId)
    func removeItem(itemId: ItemId, fromBox boxId: BoxId)

The tests have to verify the following:

* Removing an `ItemNode` removes the `ManagedItem` from its `ManagedBox`
* Removing a `BoxNode` removes the `ManagedBox`
* Removing a `BoxNode` removes its `ManagedItems` with it

There's nothing interesting to do. I still like to show the **Application Service**'s implementation because I think it shows best how well the parts integrate:

    public class BoxAndItemService: HandlesItemListEvents {
        var repository: BoxRepository! {
            return ServiceLocator.boxRepository()
        }
    
        public func removeBox(boxId: BoxId) {
            repository.removeBox(boxId: boxId)
        }
    
        public func removeItem(itemId: ItemId, fromBox boxId: BoxId) {
            if let box = repository.box(boxId: boxId) {
                box.removeItem(itemId: itemId)
            }
        }
        // ...
    }

