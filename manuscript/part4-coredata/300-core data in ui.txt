## Core Data in the UI

Since we're coding for Mac, we have the advantage of Cocoa Bindings a lot of iOS developers miss.

I have mixed feelings about this. Data- or database-centric applications can be wired with Cocoa Bindings. That's simple and effective. But it's hard to catch bugs during runtime, and it's not very intuitive to write unit tests for Cocoa Bindings as we have already seen. Integration tests will do a better job exercising the UI/Cocoa Bindings seam. I try to avoid Cocoa Bindings when the reduce in boilerplate code is minimal. And I try to limit them to the UI layer of the app so problems don't bubble up through all of my application. -- Which requires a clean separation of layers, of course.

But here, we'll use Cocoa Bindings for as much work as possible to see what the canonical Cocoa way of doing things can look like.

I> To separate progress on this front from removing the simple Domain Model in the last chapter, I will push changes to another branch of the repository, called [`core-data-ui`](https://github.com/CleanCocoa/mac-appdev-code/tree/core-data-ui) so you can follow along. I keep it around to provide a history. If you're interested in the end result that you can run, though, the "CoreDataOnly" target of the example project is the place to look for. It's always up to date.

Progress will now be synonymous to degradation. We will mix things up a lot and remove boundaries. 

### Getting Rid of Overhead

Since Cocoa Bindings are read--write-bindings, we no longer need to pass Data Transfer Objects (DTO) to the view to display data. `BoxData` and `ItemData` will just be gone.

This alone produces a lot of change and ripples.

#### Simplifying ManageBoxesAndItems

`ManageBoxesAndItems` populates the view with data. Since there's no DTO anymore, most of its behavior is gone. It simply shows the window. The window then takes care of its contents.

To keep the illusion of boundaries present, I want to let `ManageBoxesAndItems` pass its `BoxRepository` to the view. The `ItemViewController` could just as well fetch this from the `ServiceLocator` itself. But that would intertwine the UI component with Infrastructure. I don't want to make the code worse than it needs to be. This also helps illustrate how you can keep knowledge like this out of your view controllers.

#### Removing HandleBoxAndItemModifications

`HandleBoxAndItemModifications` is responsible for creating entities and changing their names.

When Cocoa Bindings are set up properly, all of this is done behind the scenes by the `NSTreeController`. We can safely get rid of this class completely.

Gone is the notion of an `eventHandler` for the view. Gone is that attribute from `ManageBoxesAndItems`. We don't even need event handling protocols. This Application Service now only wraps showing the window. We can just as well rename it to something like `ShowItemManagementWindow`.

#### Removing ProvisioningService

Since there's no event handler anymore, there's no object left which uses `ProvisioningService`. We can get rid of it, too.

`ProvisioningService` was where actual repository interactions took place. These will now have to move into the view controller directly. We could keep that service alive, but so far there's not much the view controller is going to delegate. Most changes to the actual database store are "magical": the framework takes care of that for us. 

We only need the repository for a few things:

* to generate new IDs,
* to add `Box` instances, and
* to remove `Box`es.

Item management is still the responsibility of the `Box` Aggregate. And since that Aggregate is now aware of Core Data directly, creating an item and persisting the change is as simple as calling: `box.addItemWithId(itemId, title: "the title")`.

This means we can get rid of existing but unused methods, namely:

* `func boxes() -> [BoxType]`
* `func boxWithId(_ boxId: BoxId) -> BoxType?`
* `func count() -> Int`

All of this is taken care of by the `NSTreeController` binding to Core Data. The `BoxRepository` protocol is now just this:

    public protocol BoxRepository {
        func nextId() -> BoxId
        func nextItemId() -> ItemId
        func addBoxWithId(_ boxId: BoxId, title: String)
        func removeBox(boxId: BoxId)
    }

#### Removing BoxNode and ItemNode

We're going to bind the underlying data via `NSTreeController` directly to a `NSManagedObjectContext`. There's no need to provide custom node objects.

The node objects were an abstraction of the data as a _view model_. Since the true entities are used with Cocoa Bindings, a _view model_ serves no purpose anymore.

View models are often great for simplifying view controllers. Cocoa Bindings was designed to be a simplification itself. There's no use trying to combine both.

Keeping the `TreeNode` protocol for now, it's simple to make `Box` and `Item` implement its contract:

    extension Box: TreeNode {
        public dynamic var children: [TreeNode] {
            return self.managedItems.map { $0 as! TreeNode }
        }

        public dynamic var isLeaf: Bool { return false }
    }

    extension Item: TreeNode {
        public dynamic var children: [TreeNode] { return [] }

        public dynamic var isLeaf: Bool { return true }
    }


### Super-Charging the View Controller

A lot of delegates were just removed from the project. The functionality moves into the view controller.

#### Rewiring the Controller

The `NSTreeController` currently uses custom `TreeNode` objects. But it can be customized to use Core Data entities as well. The view controller exposes a `NSManagedObjectContext` from the view controller as the data source for this. I called it `managedObjectContext`; the property name will be important to establish Cocoa Bindings in a second.

Then change the tree controller's settings in Interface Builder:

* Under its Bindings settings, in the "Parameters" group at the bottom, set the Managed Object Context to point to the view controller. The model key path should read `self.managedObjectContext`.
* Under its Attribute settings pane, change the "Mode" to "Entity Name" and set it to "ManagedBox" (which is the name of the entity in Core Data, not the name of the class we use).
* Still looking at the Attribute pane, check "Prepares Content".

This should make the tree controller fetch all instances at the beginning. That's why we don't need all these methods in `BoxRepository` anymore.


#### Adding Boxes

To add a box was pretty easy in the past: trigger an insertion event and consume the resulting `BoxData`, if any.

Without this round-trip, we have to trigger a change of the tree controller's underlying data.

Moving the `BoxRepository` sequence into the view controller, `addBox(_:)` now becomes:

    @IBAction open func addBox(_ sender: AnyObject) {
        guard let repository = repository else { return }
    
        let boxId = repository.nextId()
        repository.addBoxWithId(boxId, title: "NEW BOX!!")
    
        refreshTree()
    }

In theory, we could bind the "Add Box" button to the tree controller directly; in practice, this doesn't work if there's more than one kind of entity to be managed. So if your app only has one kind of entity and nodes in the outline view, you can get rid of this, too.

#### Adding Items

To add an item is quite similar to adding a box. We still have to find the parent box. It's either the selected node itself, or the parent of the selected node.

Since our nodes are not just dumb nodes anymore, each `Item` actually knows its parent `Box`. That's pretty convenient, and we can get rid of a lot of methods which helped discover the correct parent object.

Instead of a handful, we end up with two methods:

    @IBAction open func addItem(_ sender: AnyObject) {
        guard hasSelection() else { return }
    
        addItemToSelectedBox()
        refreshTree()
    }

    func addItemToSelectedBox() {
        guard let repository = repository,
            let selectedNode = itemsController.selectedNodes.first
            else { return }

        let itemId = repository.nextItemId()
        
        if let box = selectedNode.representedObject as? Box {
            box.addItemWithId(itemId, title: "New Item")
        } else if let item = selectedNode.representedObject as? Item {
            item.box.addItemWithId(itemId, title: "New Sibling Item")
        }
    }

That's a lot leaner. I appreciate that we lose a lot of code that got on my nerves in the past. This is not complicated at all. Because all the complexity is actually implemented in the frameworks where I can't see it. 

Less code is not much of an achievement in itself. It's a vanity metric. If your app is simple, you can get by with this approach very well since you wouldn't benefit from the purity of the past chapters. "Less code" should not be the guiding principle, though. "Enough code to do the job" is better; it forces you to think about what "the job" is. I know that my app, the Word Counter, has a more complex Domain Model, for example. The rest of the app has to be _sufficiently_ complex to deal with that, not more, so I don't compromise on readability and maintainability of the code base.

#### Removing Nodes

In a perfect world, we would've achieved Zen using this method:

    @IBAction func removeSelectedObject(sender: AnyObject) {
        guard hasSelection() else { return }

        itemsController.remove(sender)
    }

Since `Box` is not KVC compliant for the `children` array, which is nothing more but a wrapper around its `managedItems: NSSet`, `remove(_:)` will raise a runtime error.

This might be solved using not a computed `children` property but a real writeable collection. Either I add a KVC compliant wrapper around its `managedItems`, or I rename the Core Data property just for the sake of saving a few lines during removal. Both do not appeal to me.

The view controller instead has to use the `BoxRepository` just like all the other mutating button callbacks to change the Core Data store contents.

    @IBAction open func removeSelectedObject(_ sender: AnyObject) {
        guard let repository = repository,
            hasSelection()
            else { return }

        let selectedNode = itemsController.selectedNodes.first!
    
        if let box = selectedNode.representedObject as? Box {
            repository.removeBox(boxId: box.boxId)
        } else if let item = selectedNode.representedObject as? Item {
            let itemId = item.itemId
            let box = item.box
            box.removeItem(itemId: itemId)
        }
    
        refreshTree()
    }

The view controller file is down to a refreshing 130 lines of code. That's not much.

#### Getting Rid of the Repository?

`ItemViewController` will provide the `NSManagedObjectContext` for the tree controller. It has to come from somewhere; either through the `BoxRepository` or through the `ServiceLocator` or through injection via property. (I picked the `ServiceLocator` route.)

Since the `NSManagedObjectContext` is known in the view controller, couldn't we use `Box.insertBoxWithId(_:, title:, intoManagedObjectContext:)` directly and get rid of the repository? 

In the end, there'd be just a few objects left: the use case type `ShowItemManagementWindow`, the `PersistentStack` to set up Core Data, the entities themselves, and the view components. Plus the obligatory `AppDelegate`, of course. In fact, if you create a new Xcode project with a Core Data template, you'll end in a similar position when you extract the `PersistentStack` early.

That move would work. This example app is simple and the view controller code is short. That's usually not the case. Even if in this particular situation it might be okay to combine `BoxRepository` and `ItemViewController` in an attempt to get rid of all the old stuff, what would this teach us? To cram everything into view controllers? That's the bad situation we end up in sooner or later anyway. No need to push that and degrade the code further.

Apple's documentation and example apps are great to show how to implement something; but they never show how to integrate that in your apps. Or how to scale the example code so you can build your idea on top of it. As soon as we cram the `BoxRepository` into the view controller, we won't know what to do when we add a second view component that needs to access `Box`es except to copy & paste existing code. Then maybe refactor to de-duplicate the code base. But maybe not, because we're in a hurry. That's how projects turn into legacy code. 
