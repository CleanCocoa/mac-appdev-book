## Patterns & Principles

Now you know what the architectural perspective looks like.

If the architecture is the high-level view, and the actual code is at the ground-level, there's plenty of room for abstractions and concepts in between. Design patterns and programming principles are the tools you will use to work according to the plan you devised with the help of your app's architecture.

Throughout this book, you will find references to important patterns I have adopted to help me face particular challenges. Here are a few general but important ones.

It makes sense to read these first to tune in to the way of thinking I advocate in this book. You don't have to read this chapter in order to understand the actual story of building the sample application, though.


### Thinking in Terms of Ports & Adapters and Protocols {#portsadapters}

When we talked about architecture earlier, I mentioned that the application as a whole is open for adapters through its ports. The application doesn't incorporate a database management system, but it connects to it, preferably at the outermost layer to keep the rest isolated.

Practicing to thinking in terms of creating ports and being open for external adapters on one hand, and creating adapters to plug into ports on other layers on the other is a worthwhile exercise.

You're probably familiar with [the delegate pattern Apple advocates](https://developer.apple.com/library/mac/documentation/General/Conceptual/DevPedia-CocoaCore/Delegation.html) throughout the Cocoa APIs. This is the same as the general advice to [program to an interface](http://www.artima.com/lejava/articles/designprinciples.html). It also is similar to ports and adapters style.

A delegate's protocol is similar to the definition of a port. The implementation and instantiation of a delegate as an object is similar to the notion of an adapter.

If you know how the delegate pattern works, you know how ports and adapters work, in principle. In practice, adopting a ports and adapters style to design components means you end up with lots of protocols.

![Layered architecture with ports and adapters](images/20150723113926_layers-ports.png)

Take the core of your app, the Domain.

The Domain should not access a database or Core Data directly to keep it isolated. It should define a port which it queries for information through a protocol. 

The concrete adapter will have to be implemented in a layer further outside. The outermost infrastructure layer is a good candidate to wrap database access in objects you own and implement the Domain's protocol. 

In the picture above, `BoxView` is a protocol which defines how to `display(_:)` data. A concrete view controller implements this protocol and will be handed to the use case or a comparable service object. Similarly, `BoxRepository` is a protocol of the Domain implemented by a `CoreDataBoxRepository` in infrastructure.

Decoupling objects in different layers from another through protocols is a great way to separate responsibilities. The user's course of action has to start somewhere, but this point in your app needn't be a view controller.

View controllers have to worry about displaying data and reacting to user interface interaction, most likely through `@IBAction` methods. The response can be delegated to use case objects, for example, which may or may not communicate back to the view controller -- they wouldn't know for sure, since they only know about the protocols.

Protocols help partition Swift code nicely, too. It has become idiomatic to extend a type with protocols instead of adding (most) protocols to the initial inheritance list.

So instead of this:

{linenos=off}
    class Pizza: Edible, ContainsGluten, ContainsRefinedCarbs {
        
        init() { ... }
        
        func eatenBy(eater: Eater) { ... }
        func allergicReaction(eater: Eater) -> AllergicReaction { ... }
        func makeSleepy(eater: Eater) { ... }
    }

You'll rather write this:

{linenos=off}
    class Pizza {
        init() { ... }
    }   
    
    extension Pizza: Edible { 
        func eatenBy(eater: Eater) { ... }
    }
    
    extension Pizza: ContainsGluten {
        func allergicReaction(eater: Eater) -> AllergicReaction { ... }
    }
    
    extension Pizza: ContainsRefinedCarbs {
        func makeSleepy(eater: Eater) { ... }
    }

Extensions are great for reasoning about your code.

Each extension contains everything needed (save attributes) to implement a particular protocol. If a type has too many responsibilities through many extensions, I find it's easier to make a new type out of it. Extensions already looks similar to type definitions: replace `extension Foo: Bar` with `class Baz: Bar` and delegate to objects of type `Baz` from `Foo`.

Partitioning your code through extensions makes it easier to refactor one type into multiple types. It also helps to isolate responsibilities. Thus, it's a natural fit for implementing port protocols.

### Model--View--View Model (MVVM)

While ports and adapters style component design is pretty high level still, MVVM is pretty close to the metal in terms of making view programming manageable.

There's your core _domain model_. Around it, you build an application with its interface. The user interface is called _view_. So far, so similar to MVC.

Now an MVC controller will usually have access to the model data and the view, or the view will be bound to the model and update itself automatically on model changes. The latter is sometimes called _smart view pattern_. As we'll see, I don't like either of that. A basic Domain-Driven Design principle I adhere to is this: domain objects should not bleed into other layers of the application. At least not if they're mutable, that is, if they're Aggregates. You can argue that read-only entities would do no harm, but I yet have to come across something like this.

To get any data into the view, MVVM introduces the _view model_ or [_presentation model_][presmodel]. Application of this pattern vary, but they all have in common that the view model is a container for the data of the domain model. The domain model is thus shielded from the user interface. I came to think that the view model is "a model for the view", but people repeatedly say it's a "model of the view" instead. Depending on your interpretation, how you apply the pattern will vary of course.

* Dumb Data-Transfer Objects are "a model for the view". The view takes the data, works with it, and displays it somehow. These objects couple with the presenter or whichever service object puts data into the view.
* Presenters, however, model what the view can do. They become "a model of the view." They take care of assembling data suited to the view's needs. These objects couple with the view and its demands.

In the Ruby on Rails world, the presenter has become a service object which holds on to the domain model and exposes its data in a way meaningful to the view. Say you've got a `Person` entity with `firstName` and `lastName`. A `PersonPresenter` will take care of assembling a `fullName`, to display a list of `Person`s, for example. You can go all nuts here: create a `PersonListPresenter` for displaying full names in a list, and a `PersonFormPresenter` for exposing both first and last name to edit them in a form, say. This way, the view can be as dumb as possible. That's a case of preparing "a model for the view." After all, you pass the presenter in, so it becomes the view's model.

I learned to think about it from a different perspective.

![MVVM with components taken from VIPER, which we'll get to know in Part 2.](images/201507231210_mvvm.png)

Adhering to dependency inversion, the view model is indeed injected into the view. Its interface is specified by means of the view component arrangement, though -- not through a formal protocol, but through high coupling.

If the view displays the full name of a person, the presenter's interface will codify this requirement as `fullName`, even if the original data did only contain `firstName` and `surname`.

Similarly, if the age of a person in represented through `Int`s but displayed in a label, the view model should expose `age: String` instead, so the view has to do _zero_ formatting at best.

This way, the view is responsible for specifying its data provider's capabilities while it depends on some other service to provide an actual implementation.

Your client code doesn't need to know what the view does or which components it's made of. It only needs to understand the presenter's interface. The presenter in this case is a model _of_ the view: it doesn't care about the Domain Model. It only cares about the view's specification. 

Change the properties on this _model of the view_ to update the UI. A presenter hides the complexity of the user interface. To the client code, the rest happens magically.

[presmodel]: http://martinfowler.com/eaaDev/PresentationModel.html

### East-Oriented Code {#east}

<!--ct: 201412250933 east oriented code-->

You may have heard of the ["Tell, Don't Ask" Principle](https://pragprog.com/articles/tell-dont-ask). Rephrased, it means you should focus on _commands_ and get rid of as much information _queries_ as possible. (We will encounter Command--Query Separation in various forms throughout this book.)

James Ladd (@jamesladd) coined the phrase "East-Oriented Code". Where "Tell, Don't Ask" opens up to ambiguity at first, the principle of "East-Oriented Code" doesn't. It says that all your information should travel eastward, to the right, that is, no information should flow to the _left_ as you read your code.[^east]

  [^east]: James has posts on the topic on [his blog](http://jamesladdcode.com/category/its-all-about-writing-software/). So has Stephen Haberman written [about writer objects instead of getters](http://www.draconianoverlord.com/2013/04/12/east-oriented-programming.html). You may want to watch [a Ruby video](http://confreaks.com/videos/4825-RubyConf2014-eastward-ho-a-clear-path-through-ruby-with-oo) on the topic for good examples.

Take a look at an example of mixed-up information flow:

{linenos=off}
    let fullName: String = person.fullName
    theDisplay.nameLabel!.text = fullName

Here, `person.fullName` clearly is a query. Setting the text of the display's label is bound to a query, too. For the dramatic effect, I made it so that we even have to unwrap the optional `nameLabel`. Setting the text is actually a command. But `theDisplay.nameLabel!` is a query, too. And a complicated one, even.

[Sandi Metz](http://www.sandimetz.com/blog/2014/12/19/suspicions-of-nil) summarizes the problem of optionals (or `nil` objects in other languages than Swift) like this: `nil` makes you return "objects which conform to different API's".

In Ruby, this is even more apparent, because a `nil` object actually responds to a few methods. In Objective-C, it responds to everything and fails silently. In Swift, we have to deal with runtime errors. It's more verbose, and I think it's a good idea to not allow to return `nil` whenever possible because we have to deal with two types of things instead of one.

Making your code "East-Oriented" means you should at least get rid of queries. Don't ask for information or view components -- tell your objects to perform changes instead:

{linenos=off}
    person.displayName(theDisplay)

Now `person` may hide its `fullName` from the outside, because you shouldn't query it anyway. Internally, it could do this:

{linenos=off}
    func displayName(aDisplay: DisplaysNames) -> Person {
        let data = ["firstName" : firstName, "lastName" : lastName]
        aDisplay.displayName(data)
        
        return self
    }

The `DisplaysNames` protocol can specify alternate `displayName` methods which accepts more than a single data parameter instead. But then `Person` would have to know about this, and passing initials or middle names will require different methods instead of different keys in the data container. I like the flexibility of this approach to illustrate the principle.

Also worth noting is that I suddenly return the `Person` object's instance. Shouldn't a command be of return type `Void`?

According to one accompanying convention of the "East-Oriented Code" principle, we should `return self` in commands in order to chain them:

{linenos=off}
    person.displayName(theDisplay)
        .storeShoppingCart(theCartHandler)
        .issueRefunds()

[James' principles](http://jamesladdcode.com/?p=302) in a nutshell:

> 1. All **public** methods should be void, boolean or return a reference to the current object (this in Java).
> 2. Objects that implement the Factory or Builder pattern or similar are an exception.
> 3. East is better suited to composite objects, not primitive objects.

You don't have to make your code chainable, of course. If returning `self` causes problems or breaks your tests, though, your code isn't ready for focussing on a command-centric approach. This should become a driver of change towards useful refactorings.

I will apply a lot of this later in the book, when it comes to [using commands instead of queries](#refactoring-to-commands) to provision new `Box` objects in the Domain.
