{pagebreak}

## Ports and Adapters

Recall that the basic idea of this architectural style is this: separate queries from commands and isolate layers through ports and adapters. _Ports_ are interfaces (protocols) declared in one layer, while _Adapters_ are classes from other layers which satisfy a Port's specification:

![Ports and Adapters](images/20141204100034_ports-adapters.png)

Instead of one adapter knowing about its collaborator on the other side of the boundary, each adapter only knows a protocol from its module. That marks a dependency. The actual implementation of that protocol is _injected._ This move is sometimes called "Dependency Inversion," because you don't go the naive route and depend on a component from another module but instead depend on a protocol from your own module that others satisfy. The "inversion," then, is the inversion of arrow directions.

This is nothing new to the code, actually. For example, `BoxRepository` is a port of the domain to which `CoreDataBoxRepository` from infrastructure is an adapter. Similarly, the `HandlesItemListEvents` protocol from the user interface layer is implemented by an application service.

I want to refactor `HandlesItemListEvents` to pay more attention to command--query separation.


### Concerns With the Naive Approach {#refactoring-to-commands}

Have a look at the event handling protocol again:

{linenos=off}
    provisionNewBoxId() -> BoxId 

In fact, this method is kind of a mix between typical data source and delegate method. It's intent is a command, suitable for user interaction events. But it's also meant to return an object like a factory or data source does. 

It should be rephrased as such:

{linenos=off}
    provisionBox()
    newBoxId() -> BoxId

The two processes can't be split up in the **Application Service**, though. With the current expectations in place, `newBoxId()` would have to return the last ID the service had provisioned. This way, everything will fall apart too easily once `provisionBoxId()` is called twice. Just think about concurrency. The contract to call both methods in succession only can't be enforced, so better not rely on it.

Another alternative is to model it as such:

{linenos=off}
    newBoxId() -> BoxId
    provisionBox(_: BoxId)

The service will be an adapter to both domain and infrastructure this way. It'd work, but it's not what I aim for.

To model the expectation of "provision first, obtain ID second" more explicitly, one could introduce a callback to write the ID to, like so:

{linenos=off}
    provisionBox(andReportBoxId: (BoxId) -> Void)

I don't like how that reads, though. And since there's just a single window present, we can formalize this as another protocol from the point of view of `BoxAndItemService`.

My very first take:

{title="Introduce consumer protocol as output port"}
    protocol ConsumesBoxId: class {
        func consume(boxId: BoxId)
    }
    
    class BoxAndItemService: HandlesItemListEvents {
        // Output port:
        var boxIdConsumer: ConsumesBoxId?

        func provisionBox() {
            let repository = ServiceLocator.boxRepository()
            let boxId = repository.nextId()
            storeNewBox(withId: boxId, into: repository)
            reportToConsumer(boxId: boxId)
        }
        
        fileprivate func storeNewBox(withId boxId: BoxId, 
            into repository: BoxRepository) {
            
            let box = Box(boxId: boxId, title: "New Box")
            repository.addBox(box)
        }
        
        fileprivate func reportToConsumer(boxId: BoxId) {
            // Thanks to optional chaining, a non-existing boxIdConsumer
            // will simply do nothing here.
            boxIdConsumer?.consume(boxId: boxId)
        }
    }

Instead of _querying_ `BoxAndItemService` for an ID, the view controller can now _command_ it to provision a new `Box`. The service won't do anything else. Clicking the button will add a `Box` as it says on the label, but it won't change the view. The design of these components is flexible and the service doesn't know the consumer. It is not tied to a view component. You could say that it's just a coincidence the `ItemViewController` in return receives the _command_ to `consume()` a `BoxId`. This, in turn, will trigger adding a new node with the appropriate `BoxId` to the outline view.


### Using Domain Services and Domain Events

What `reportToConsumer(boxId:)` does equals the intent of the well-known _observer pattern_. In Cocoa, we usually send notifications. This is more like calling a delegate because it's a 1:1 relationship instead of the many-to-one observer pattern relationship:

{linenos=off}
    func reportToConsumer(box: Box) {
        boxConsumer?.consume(box)
    }

But I notice the **Application Service** `BoxAndItemService` is now doing these things:

* it sets up the aggregate `Box`
* it adds the aggregate instance to its repository
* it notifies interested parties (limited to 1) of additions

Essentially, that's the job of a **Domain Service**.

The domain has a few data containers, but no means to create **Aggregate**s or manipulate data. The application layer, being client to the domain, shouldn't replace domain logic. Posting "Box was created" events is the domain's responsibility.

Using `NotificationCenter` as a domain event publisher, `BoxAndItemService` loses part of its concerns in favor of a Domain Service, `ProvisioningService`:

{title="Refactoring business logic into a dedicated Domain Service"}
    open class ProvisioningService {
        let repository: BoxRepository
    
        var eventPublisher: NotificationCenter {
            return DomainEventPublisher.defaultCenter()
        }
    
        public init(repository: BoxRepository) {
            self.repository = repository
        }
    
        open func provisionBox() {
            let boxId = repository.nextId()
            let box = Box(boxId: boxId, title: "New Box")
        
            repository.addBox(box)
        
            eventPublisher.post(
                name: Events.boxProvisioned,
                object: self,
                userInfo: ["boxId" : boxId.identifier])
        }
        
        open func provisionItem(inBox box: Box) {
            let itemId = repository.nextItemId()
            let item = Item(itemId: itemId, title: "New Item")

            box.addItem(item)
    
            let userInfo = [
                "boxId" : box.boxId,
                "itemId" : itemId
            ]
            eventPublisher.post(
                name: Events.boxItemProvisioned,
                object: self,
                userInfo: userInfo)
        }
        
        // (Mis)using enum as a namespace for notifications:
        enum Events {
            static let boxProvisioned = 
                Notification.Name(rawValue: "Box Provisioned")
            static let boxItemProvisioned = 
                Notification.Name(rawValue: "Box Item Provisioned")
        }
    }

I'm not all that keen about the way `NotificationCenter`s work. Dealing with the `userInfo` parameter is error-prone; both during consumption and creation you can have a typo in a key and end up with a runtime error or unexpected behavior.

I think `provisionItem` doesn't read too well, but it's not the worst method in human history, either. But getting the data out is getting bad:

{linenos=off}
    let boxInfo = notification.userInfo?["boxId"] as! NSNumber
    let boxId = BoxId(fromNumber: boxInfo)

It's hard to read and complicated when compared to, say:

{linenos=off}
    let boxId = boxCreatedEvent.boxId

To introduce another layer of abstraction is a good idea, especially since Swift's structs make it really easy to create **Domain Event**s. It will improve the code, although you'll have to weigh the additional cost of developing and testing this very layer of abstraction. For the sake of this sample application, I prefer not to over-complicate things even more and stick to plain old notifications for now.

To replace the command--query-mixing methods from before, there needs to be an event handler which subscribes to Domain Events in the application layer and displays the additions in the view.

Before I expand the Domain with these event types, though, we'll have a look at another refactoring in the Application layer.
