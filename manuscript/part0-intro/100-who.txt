## Who Is This Book For?

You have all the best intentions but no clue how to make them a reality: You want to write clean code and you don't want to end up with ugly and unmaintainable applications. 

I was stuck in that same situation. I wanted to write my own apps and found my needs quickly surpassed the guidance of Apple's documentation and sample codes. Both are a useful resource, but you won't learn how to scale and create a complex application. 

Typical questions include:

* How do you architect a complex application?
* How do you deal with large databases? 
* How should you implement background services?

It's a popular advice that you should not stuff everything into your view controllers to avoid suffering from _massive view controller_ syndrome. But nobody show how that works in apps. Maintainable code is important for an app that grows, so how do you get there?

I focus on laying the foundation for an answer to the first question, how to architect Mac apps. I won't tell you how to scale your database and how to split your app into multiple services in this book. (But check the website from time to time, because I've got something in the making!) <!--ct: TODO add multiproc book reference--> 

To read this book, you don't need to be a Cocoa wiz. You don't even need to be proficient with either Swift or Objective-C: I don't use crazy stuff like method swizzling or operator overloading or anything that's hard to grasp, really. When I wrote the first edition of this book in 2014, I just learned Swift myself. So there's lots of explanation and sense-making along the way. Chances are you already know Swift better required to understand the book.

Here's what I hope you will learn from this book:

* Your will learn to recognize the core of your application, the Domain, where the business rules belong. This is the very core of your application and it has no knowledge of UIKit, AppKit, whatever-kit -- it's all yours, custom made.
* Consequently, you will learn how to put your view controllers on a diet. We will consider them a mere user interface detail.
* Along the way, you'll get comfortable with creating your own "POSO"s (Plain Old Swift Objects) that convey information and encapsulate behavior instead of desperately looking for canned solutions.

In short, the message of the book is: don't look for help writing your app. Learn how to create a solid software architecture _you_ are comfortable with instead, and plug in components from third parties where necessary.

