# Epilogue

Writing this book changed how I approached coding this example application. I know writing makes you think clearly; but I found it improved my code, too. 

Maybe writing is a tool you could make use of. There's not much going on in the Cocoa app developer community regarding field reports. How do you develop applications? What challenges did you face today? These are useful questions for you to answer and provide insight for your readers. It also helps to think about decisions and write down alternate paths. By pointing at alternatives throughout this book, I have discovered how hard it has been to stick to a plan without knowing the options. Writing about the options relieved me from the stress of not knowing what might happen if I do something else instead because now I knew without having to do any coding.

Me, I have found out that I want to try to implement the `ManagedBox`/`Box` distinction in the Word Counter to put Core Data in the outermost layer because it works really well once set up.

But before I spend lots of hours getting that to work, it's okay to start small. I can use Core Data and Cocoa Bindings to my advantage to get up to speed initially. Since the model of the Word Counter is not so simple, I will not use Cocoa Bindings from the view controller to Core Data, but keep a view model layer in tact.

The view model will help me prepare values for the different columns of the view without cluttering the real model. And should I switch from Core Data to Realm or SQLite or anything else, Core Data wouldn't be too entangled into everything. I think that's the sweet spot to aim for initially and then move forward once the feature is ready.

Separating the functionality into cleanly divided layers proves to be a huge win. When components are separated and well-factored, adding or changing functionality becomes a lot easier. Still, sometimes it may be better to stick to the Cocoa features for a while until you find the app grows in complexity. Not every tool needs to be well-architected. Small apps that won't change a lot over the years can benefit from a shorter "time to market," that is less development time. In the end, you have to weigh the pros and cons. To do so, you have to _know_ them first, though.


## The Use of Cocoa Bindings

As we've seen in part 4, Cocoa Bindings are a great way to simplify user interface set-up. Bindings make most of the view controller boilerplate obsolete.

If your model is KVC or Bindings compliant, that is.

Keep in mind that the alternate approach I advocated throughout the rest of this book was to use view models. Using view models, you take the real entities and prepare them for display use. It's easy to see what the view model provides, and their public API reveals what the interface is going to use.

Cocoa Bindings does not help to reason about your code.

With Bindings, you pass the real deal around. If you want to add a helper method which prepares a `fullName: String` somewhere to slim down your view controller's formatting concerns, there's only one place left: the model itself.

Your Core Data managed objects will have to be both the entities and the view model, so to speak.

If your app is simplistic like the sample app of this book, then you'll be just fine. But if you add more and more functionality to the entities, they're going to get bloated.

The majority of this book is dedicated to helping you develop strategies to get past the point of _Big Ball of Mud_ design, of cruft and mess.

You've seen that over-architecting leads to code no-one needs. If you want to display a list of items, and that's it, just don't try to force a Domain Model into the app.

Similarly, the conventional pasting together of code snippets from StackOverflow will not help keep the code readable or clean. MVVM is trendy, but it's probably not the cure to your problem.

I hope to have provided evidence so you can pick wisely which path your next app or your next big refactoring will take.

If in doubt, shoot me an e-mail and ask!
