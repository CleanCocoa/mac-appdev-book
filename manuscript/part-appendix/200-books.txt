
{pagebreak}

## Interesting Books {#booklist}

I recommend reading the following books, ordered by subjective significance to the topic. 

{begin-hanging-paragraphs}


Vaughn Vernon (2013):  _Implementing domain driven design_, Upper Saddle River, NJ: Addison-Wesley.  
  --- _Lots of practical examples and explanation for the patterns Evans laid out._


Eric Evans (2006):  _Domain-Driven Design. Tackling complexity in the heart of software_, Upper Saddle River, NJ: Addison-Wesley.  
  --- _Full of good examples and refactorings itself but a little light on actually solving implementation problems._


Michael C. Feathers (2011):  _Working effectively with legacy code_, Upper Saddle River, NJ: Prentice Hall Professional Technical Reference.  
  --- _Helps to learn decoupling code incrementally and how to test hard-to-test parts. That's where I learned to provide means to reset singletons, and that it's better to wrap `NSNotificationCenter` in order to replace the wrapper in tests than not test notifications at all._


Steve Freeman and Nat Pryce (2010):  _Growing object-oriented software, guided by tests_, Boston: Pearson Education.  
  --- _This book has taught me so much about Test-Driven Development! I figured out when to use functional tests, why it's beneficial to start with a failing test on the system level to guide development, and how to create multi-layered applications with test fakes all thanks to this book._


{pagebreak}


Ivar Jacobson, Magnus Christerson, Patrik Jonsson, and Gunnar Ã–vergaard (1990):  _Object-Oriented Software Engineering. A Use Case Driven Approach_, Wokingham: Addison-Wesley.  
  --- _Actually a recommendation by Uncle Bob in _Architecture: The Lost Years_. It taught me to think about application services and use case objects. The book's focus is on architecture, not on code. Useful practices. You may get this one used for a few dollars. I found it in my local university's library._


Scott Millett (2014):  _Practicing Domain-Driven Design. Practical advice for teams implementing the development philosophy of Domain-Driven Design. With code examples in C# .NET_, Scott Millett.


Robert C. Martin (2009):  _Clean Code. A Handbook of Agile Software Craftsmanship_, Upper Saddle River: Prentice Hall.


David West (2004):  _Object thinking_, Redmond, Wash.: Microsoft Press.


Andy Oram and Greg Wilson (Eds.) (2007):  _Beautiful Code_, Beijing: O'Reilly.


Sandi Metz (2013):  _Practical object-oriented design in Ruby: an agile primer_, Upper Saddle River, NJ: Addison-Wesley.  
  --- _A really good read. Sadly, it's about Ruby, not about Swift or Objective-C, but you may want to peek into it anyway._

{end-hanging-paragraphs}
