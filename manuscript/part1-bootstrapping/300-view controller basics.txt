## Preparing the UI: Create View Controllers and Test Their Setup

We'll ignore Storyboards for the Mac SDK for now when creating the view. This example project will have just one window and no transitions, so there's no benefit in using Storyboards. Storyboards suggest different kinds of view transitions and event handling, which would only distract from what we're really up to.

I adopted the following practice for creating views:

* Use a custom `NSWindowController` subclass for each window or panel and give it its own Nib file.
* Use a designated `NSViewController` subclass for each logical unit of the view. In the case of the Box-and-Item-management view, there is only one such component.
* When the unit is used only once, wire its outlets up from within the window's Nib.
* When the unit is re-used, put it into its own Nib file and connect the outlets there instead of the window's Nib.

Not every button needs its own controller, but buttons modifying a list belong to the list's view controller.

So we take the following steps:

* Add `ItemManagementWindowController` and the accompanying Nib file. 
* Add an `NSOutlineView` to the window and bind it to a `ItemViewController` which worries about data handling exclusively. 
* Add an `NSTreeController` to the Nib to manage the actual `NSOutlineView` data. It's strongly referenced by the `ItemViewController`.


{pagebreak}

### Remove the Burden of UI from AppDelegate

The Mac Cocoa project template used `AppDelegate` as the owner of the main window. I tend to put `AppDelegate` into Infrastructure. The user interface belongs elsewhere, so factoring the main window out into its own controller will both slim down `AppDelegate` and make the overall app design more supple instantly.

Thus, remove every notion of `NSWindow` from the `AppDelegate` and show `ItemManagementWindowController`'s window from within `applicationDidFinishLaunching()`. That suffices to show the user interface.[^5090735c386896e031551dc9e0c47a3e5d351d83]
<!--ct: commit #5090735c386896e031551dc9e0c47a3e5d351d83-->

I don't trust my ability to use Interface Builder a lot, and I assume I will get Cocoa Bindings wrong from time to time. Thus, I add regression tests to show I have set up everything as intended:


    // ItemViewControllerTests.swift
    func testItemsController_IsConnected() {
        XCTAssertNotNil(viewController.itemsController)
    }
    
    func testItemsController_CocoaBindings() {
        let controller = viewController.itemsController
        let outlineView = viewController.outlineView
        let titleCol = outlineView.tableColumnWithIdentifier(kTitleColumnName)
        let countCol = outlineView.tableColumnWithIdentifier(kCountColumnName)
        
        XCTAssertTrue(hasBinding(controller, binding: NSSortDescriptorsBinding, 
            to: viewController, throughKeyPath: "self.itemsSortDescriptors"))
        XCTAssertTrue(hasBinding(outlineView, binding: NSContentBinding, 
            to: controller, throughKeyPath: "arrangedObjects"))
        
        XCTAssertTrue(hasBinding(titleCol!, binding: NSValueBinding, 
            to: controller, throughKeyPath: "arrangedObjects.title"))
        XCTAssertTrue(hasBinding(countCol!, binding: NSValueBinding, 
            to: controller, throughKeyPath: "arrangedObjects.count"))
    }

<!--ct: 20141124163838 explicit bindings make things worse-->

{#x20141124163838}
I hunted for a bug for a while only to find the Cocoa Binding from `NSOutlineView` to `NSTreeController` is in place _although I don't set it explicitly_. If I _do_, the behavior goes all nuts. It seems that the column bindings make up for the rest. I have no clue how to verify this kind of automated set-up in the Nib without explicit bindings slipping by. Parsing the Nib XML is out of question.[^dc824da1016025abd8be61fafb560995527dccfb]
<!--ct: commit #dc824da1016025abd8be61fafb560995527dccfb-->

[^dc824da1016025abd8be61fafb560995527dccfb]: See [commit dc824da](https://github.com/DivineDominion/mac-appdev-code/commit/dc824da1016025abd8be61fafb560995527dccfb)
[^5090735c386896e031551dc9e0c47a3e5d351d83]: See [commit 5090735](https://github.com/DivineDominion/mac-appdev-code/commit/5090735c386896e031551dc9e0c47a3e5d351d83)


### Create `XCTestCase` Extensions with Test Helpers

The function `hasBinding(_,binding:,to:,throughKeyPath:)` I used in the test case above is a little helper to inspect the underlying bindings dictionary from tests in a readable fashion:

    extension XCTestCase {
        func hasBinding(
            _ object: NSObject, 
            binding: String, 
            to boundObject: NSObject, 
            throughKeyPath keyPath: String) -> Bool {
            
        guard let info = object.infoForBinding(binding) 
            else { return false }
        
        let observedObject = info[NSObservedObjectKey] as! NSObject
        let observedKeyPath = info[NSObservedKeyPathKey] as! String
        
        return observedObject.isEqual(boundObject)
            && observedKeyPath == keyPath
    }

With the test in place, I can know that the basic setup is working.

### A Note on Splitting Concerns Into Objects and Creating so Many Files

Was the sudden explosion of files worth it? Couldn't we've kept the AppDelegate to manage the window?

I tend to react to questions like this with skepticism. Why worry about the amount of files? What's the underlying motive for such a question? Most of the time, it's a feeling of discomfort. It's usually folks who learned to cram everything into the `AppDelegate` or into view controllers who bring this up. It's a defense mechanism. 

To extract these things into different types and files may be a new approach for you, too. I have to ask you to follow me along this path for now and judge the end result for yourself. "Too many files" is a vanity metric. The file count will neither prove your app is well-factored and clean, nor that it's the opposite. It's meaningless. So don't get hung up on superficial stuff like this and focus on the real work: designing focused and maintainable objects.

So why now? The app doesn't do a thing, yet, which means I only introduced overhead. That's right, but I know that I don't want to cram stuff into my `AppDelegate` later. At the moment, the  additions are simple and cheaply made. There's no point in saving a couple of calories now only to spend more energy tearing out code later. Since leaving window management and view handlnig in the `AppDelegate` is out of question, this is a first move to adjust the overall design and architecture to my needs.

Once we begin to send messages here and there, the split between objects will make a lot more sense. We're getting there and you'll see how I prove my point.

### Understanding View Controller Tests

To test controls such as buttons, there's no need to simulate clicks in the tests, although that's probably the first thing you want to do. After you analyze the process of button click handling, you can see what should be tested instead. Action handling involves proper setup in the Nib from outlet to action method first. We can test that, but we don't need to verify what "wiring outlet to action" means; we should trust the AppKit framework to do its job. Testing that Nib wiring does what it advertises will not give us more confidence because we cannot control AppKit's internals. Verifying a button click thus turns into a two-step process: verify the button is wired to an action method, then verify that invoking this method does what you expect. The actual click is not our concern.[^c5c351b54e53a5d22b44c20e376bca521f451e54]

{linenos=off}
    // Test that there's a button outlet
    func testAddItemButton_IsConnected() {
        XCTAssertNotNil(viewController.addItemButton)
    }
    
    // Test that it is connected to an action method
    func testAddItemButton_IsWiredToAction() {
        XCTAssertEqual(viewController.addItemButton.action, 
            #selector(ItemViewController.addItem(_:)))
    }
    
    // Specify preconditions in "Initially" context
    func testInitially_TreeIsEmpty() {
        XCTAssertEqual(itemNodeCount(), 0, "start with empty tree")
    }
        
    // Invoke the button's action method to verify its behavior
    func testAddingItem_WithEmptyList_AddsItem() {
        viewController.addItem(self)
        
        XCTAssertEqual(itemNodeCount(), 1, "adds item to tree")
    }

Finally, once the "add" button does what is is created to do, we know that the tests are configured correctly.

<!--ct: commit #c5c351b54e53a5d22b44c20e376bca521f451e54 initial view setup
#7648d603c832c5d7cd41a041da5d3e4114f7c955 switch to outline view-->

[^c5c351b54e53a5d22b44c20e376bca521f451e54]: See [commit c5c351b](https://github.com/DivineDominion/mac-appdev-code/commit/c5c351b54e53a5d22b44c20e376bca521f451e54) and [7648d60](https://github.com/DivineDominion/mac-appdev-code/commit/7648d603c832c5d7cd41a041da5d3e4114f7c955)
