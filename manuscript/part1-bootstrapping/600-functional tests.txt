## Functional Testing Helps Transition to Adding Real Features

I'm pretty confident the view does what it should do. It's all just basic stuff, although it took enough trial & error to reach this point. (I am talking about you, [explicit Cocoa Bindings](#x20141124163838) which break the view's behavior!)

I am curious if the app will work, though. This is only natural. Developers want to have a running prototype as early as possible. I'm no exception. Unit tests can help to get feedback that algorithms work. But you won't know if the app executes and performs anything at all until you run it. There are two steps I could take at this point to quench my curiosity.

First, I could use more unit tests to verify that view model updates result in `NSOutlineView` updates. These updates should also be visible when I run the app, but the unit tests won't give visual feedback. Still, I would verify that the controller logic works. Since the data doesn't change in the background but depend on me clicking on widgets, I'm eager to see Cocoa Bindings in action. Then again, I've already witnessed Cocoa Bindings in another project. It felt like magic when the label updated to a new value that the component received after a couple of idle time automatically. Key-Value Observing is doing a lot of the hard work here. I can assure you that the Cocoa Bindings are set up correctly; in fact, the binding tests verify that the setup is working. Seeing the changes in the running app equals a manual integration test -- that is testing Apple's internal frameworks to do their job properly. That doesn't make any sense. I would like to see it in action, but it won't provide any useful information.

Second, I could add functional tests to the test harness. And this is what I'll do: in a fashion you usually find with Behavior-Driven Development (as opposed to Test-Driven Development, where you start at the innermost unit level), I'll add a failing test which will need the whole app to work together in order to pass. It's a test which is going to be failing for quite a while. It's an automated integration test that exercises various layers of the app at once.

In the past I wrote failing functional tests for web applications only because they would drive out the REST API or user interaction pretty well. I haven't tried this for iOS or Mac applications, yet. So let's do this.

If you work by yourself, I think it's okay to check in your code with a failing test as long as it's guiding development. Don't check in failing unit tests just because you can't figure out how to fix the problem immediately. Everything goes as long as you don't push the changes to a remote repository. Until that point, you can always alter the commit history.

Having a failing functional test at all may not be okay with your team mates, though. After all, your versioning system should always be in a valid state, ready to build and to pass continuous deployment. Better not check in the failing test itself, then, or work on a local branch exclusively until you rebase your commit history when your feature is ready.

The bad thing about functional tests or integration tests is this: if all you had were functional tests, you'd have to write a _ton_ of them. With every condition, with every fork in the path of execution, the amount of functional tests to write grows by a factor of 2. Functional tests grow exponentially. That's bad.

So don't rely too much on them. Unit tests are the way to go. 

And make sure you watch [J. B. Rainsberger's "Integrated Tests are a Scam"](https://vimeo.com/80533536) some day soon. It's really worth it.

That being said, let's create a functional test to learn how things work together and guide development.

### First Attempt at Capturing the Expected Outcome

I want to go from user interface actions all down to Core Data. That's a first step. This is the test I came up with:

    func testAddFirstBox_CreatesBoxRecord() {
        // Precondition
        XCTAssertEqual(repository.count(), 0, "repo starts empty")
        
        // When
        viewController.addBox(self)
    
        // Then
        XCTAssertEqual(repository.count(), 1, "stores box record")
        XCTAssertEqual(allBoxes().first?.title, "New Box")
    }

There's room for improvement: I expect that there's a record with a given `BoxId` afterwards, and that the view model contains a `BoxNode` with the same identifier. This is how the view, domain, and Core Data stay in sync. But the naive attempt at querying the `NSTreeController` is hideous:

{linenos=off}
    viewController.itemsController.arrangedObjects.childNodes!!.first.boxId

I rather defer such tests until later to avoid these train wreck-calls and stick with the basic test from above that at least indicates the `count()` did change, even though I don't know if the correct entity was inserted at this point.

### Making Optionals-based Tests Useful

On a side note, I think Swift's optionals are making some tests weird. With modern Swift, optional chaining and `XCTAssertEqual` play together nicely:

{linenos=off}
    XCTAssertEqual(allBoxes().first?.title, "New Box")

Sometimes, you need to unwrap an optional, though. Force-unwrapping `nil` results in a runtime error which we want to avoid during tests because it interrupts execution of the whole test suite. A failure is preferable.

{linenos=off}
    if let box = allBoxes().first {
        XCTAssertEqual(box.title, "New Box")
    } else {
        XTCFail("expected 1 or more boxes")
    }

Imagine `allBoxes()` returned an optional; then the complexity of the test would increase a lot:

{linenos=off}
    if let boxes = allBoxes() {
        if let box: ManagedBox = allBoxes().first {
            XCTAssertEqual(box.title, "New Box")
        } else {
            XCTFail("no boxes found")
        }
    } else {
        XCTFail("boxes request invalid")
    }

When you work with collections, instead of `nil`, return an empty array. This makes the result much more predictable for the client. Here's the updated version:

{title="Don't allow optionals if there's no need to"}
    func allBoxes() -> [ManagedBox] {
        let request = NSFetchRequest(entityName: ManagedBox.entityName())
        let results: [AnyObject]
        
        do {
            try results = context.fetch(request)
        } catch {
            XCTFail("fetching all boxes failed")
            return []
        }

        guard let boxes = results as? [ManagedBox] else {
            return []
        }

        return boxes
    }

If optional chaining doesn't work for you for some reason, make it a two-step assertion instead:

{linenos=off}
    let box: ManagedBox = allBoxes().first
    XCTAssertNotNil(box)
    if let box = box {
        XCTAssertEqual(box.title, "New Box")
    }

If the value is `nil`, the first assertion will fail and the test case will be marked as a failing test. You can come back to it and fix it. No breaking runtime errors required!

### Wire-Framing the Path to "Green"

Now this integration test fails, of course. In broad strokes, this is what's left to do to connect the dots and make it pass:

* I have to make a repository available to the view. I'll do this via **Application Service**s.
* I have to add an actual Application Service layer. Remember, this is the client of the domain.
* The Application Service will issue saving `Box`es and `Item`s without knowing about Core Data.
* I need a service provider of sorts. Something somewhere has to tell the rest of the application that `CoreDataBoxRepository` (from Infrastructure) is the default implementation of the `BoxRepository` protocol (from the Domain). The process of setting this up takes place in the application delegate, but there's a global `ServiceLocator` singleton missing to do the actual look-up.
* I may need to replace the `ServiceLocator`'s objects with test doubles.

The `ServiceLocator` can look like this:

{title="ServiceLocator singleton to select default implementations"}
    open class ServiceLocator {
        open static let sharedInstance = ServiceLocator()
        
        // MARK: Configuration
        
        fileprivate var managedObjectContext: NSManagedObjectContext?

        public func setManagedObjectContext(_ managedObjectContext: NSManagedObjectContext) {
            precondition(self.managedObjectContext == nil, 
                "managedObjectContext can be set up only once")
                
            self.managedObjectContext = managedObjectContext
        }
        
        // MARK: Dependencies
        
        public class func boxRepository() -> BoxRepository {
            return sharedInstance.boxRepository()
        }
        
        // Override this during tests:
        open func boxRepository() -> BoxRepository {
            guard let managedObjectContext = self.managedObjectContext
                else { preconditionFailure("managedObjectContext must be set up") }
            
            return CoreDataBoxRepository(managedObjectContext: managedObjectContext)
        }    
    }

It's not very sophisticated, but it is enough to decouple the layers. An Application Service could now perform insertions like this:

    public func provisionBox() -> BoxId {
        let repository = ServiceLocator.boxRepository()
        let boxId = repository.nextId()
        let box = Box(boxId: boxId, title: "A Default Title")
        
        repository.addBox(box)
        
        return boxId
    }

This is not a command-only method because it returns a value. Instead of returning the new ID so the view can add it to the node, the service will be responsible for actually adding the node to the view. That'd be the first major refactoring.[^cf861676e8ce37ec13bce12999f7e778f2ce081d]
<!--ct: commit #cf861676e8ce37ec13bce12999f7e778f2ce081d-->

It's about time to leave the early set-up phase and enter Part II, where I'm going to deal with all these details and add the missing functionality.

[^cf861676e8ce37ec13bce12999f7e778f2ce081d]: See [commit cf86167](https://github.com/DivineDominion/mac-appdev-code/commit/cf861676e8ce37ec13bce12999f7e778f2ce081d)
