I'm pretty confident the view does what it should do. It's all just basic stuff until now, although it took enough trial & error to reach this point. (I am talking about you, explicit Cocoa Bindings which break the view's behavior! <!--ct: ยง20141124163838-->)

There are two steps I could take now to quench my curiosity:

1. Verify that view-model updates result in visible `NSOutlineView` updates. Since the data doesn't change behind the scenes, I'm eager to see Cocoa Bindings in action. Then again, I already did test this in another app by changing a visible property after a couple of seconds. It was magic. No need to test Apple's internal frameworks, so I don't go down this path.
2. Add functional tests to the test harness. This is what I'll do: in kind-of Behavior-Driven Development-style, I'll add a failing test which needs the whole app to work together in order to fulfil the promise. It's a test which is going to fail for quite some time.

In the past I wrote failing functional tests for web applications only because they would drive out the REST API or user interaction pretty well. I haven't tried this for iOS or Mac applications, yet.

### First Attempt at Capturing the Expected Outcome

I want to go from user interface down to Core Data. That's a first step. This is the test I came up with:

    func testAddFirstBox_CreatesBoxRecord() {
        // Precondition
        XCTAssertEqual(repository!.count(), 0, "repo starts empty")
        
        // When
        viewController!.addBox(self)
    
        // Then
        XCTAssertEqual(repository!.count(), 1, "stores box record")
        XCTAssertEqual(allBoxes()!.first!.title, "New Box")
    }

There's room for improvement: I expect that there's a record with a given `BoxId` afterwards, and that the view model contains a `BoxNode` with the same identifier. This is how the view, domain, and Core Data stay in sync. But the naive attempt is hideous:  `viewController.itemsController.arrangedObjects.childNodes!!.first.boxId`. I rather defer it to a later point.

### Useful optionals-based tests

On a side note, I think Swift's optionals are making tests weird. Consider this line:

    XCTAssertEqual(allBoxes()!.first!.title, "New Box")

`allBoxes()` is of kind `() -> [ManagedBox]?`, that is, it returns an array or nil. To use it this way was pretty straightforward in Objective-C:

    func allBoxes() -> [ManagedBox]? {
        let request = NSFetchRequest(entityName: ManagedBox.entityName())
        return context.executeFetchRequest(request, error: nil) as [ManagedBox]?
    }

The thing is, force-unwrapping a `nil` optional results in a runtime error. Objective-C would've told us that "nil doesn't equal whatever". Swift won't. So I have to take care of this case:

    if let boxes = allBoxes() {
        XCTAssertEqual(boxes.first!.title, "New Box")
    }

What if the fetch request was valid, but the result set empty?

    if let boxes = allBoxes() {
        if let box = boxes.first as? ManagedBox {
            XCTAssertEqual(box.title, "New Box")
        }
    }

We've surpassed runtime errors but end up not testing the `else` case anymore.

    if let boxes = allBoxes() {
        if let box: ManagedBox = allBoxes().first {
            XCTAssertEqual(box.title, "New Box")
        } else {
            XCTFail("no boxes found")
        }
    } else {
        XCTFail("boxes request invalid")
    }

Now that's become quite a monster.

An alternate approach is to change `allBoxes()` to `() -> [ManagedBox]!` to get rid of at least the first clause. Swift tells us to stop using optionals when we don't need them. Here's the updated version:

    func allBoxes() -> [ManagedBox] {
        let request = NSFetchRequest(entityName: ManagedBox.entityName())
        let results: [AnyObject]? = context.executeFetchRequest(request, error: nil)
        
        if let boxes = results as? [ManagedBox] {
            return boxes
        }
        
        return []
    }

It's still unsafe to force-unwrap `first!` when the array is empty. I'd love to create my own assertion shorthand for this and call `XCTFail` in the case of runtime errors -- but I can't actually catch runtime errors in Swift. Very unfortunate. I wonder how Apple writes tests with these limitations.

I end up having to use the explicit version:

    if let box: ManagedBox = allBoxes().first
        XCTAssertEqual(box.title, "New Box")
    } else {
        XCTFail("no boxes found")
    }

### Wireframing the path to "green"

Now the test fails, of course.

In borad sketches, this is what's left to do to connect the dots:

* I have to make a repository available to the view. I'll do this via **Application Service**s.
* I have to add an actual **Application Service** layer. Remember, this is the client of the domain.
* The **Application Service** will issue saving `Box`es and `Item`s without knowing about Core Data.
* I need a service provider of sorts. Something somewhere has to tell the rest of the application that `CoreDataBoxRepository` is the default `BoxRepository` protocol implementation. The process of setting this up takes place in the application delegate, but there's a global `ServiceLocator` singleton missing to do the actual look-up.
* I may need to replace the `ServiceLocator`'s objects with test doubles.

The `ServiceLocator` can look like this:

    class ServiceLocator {
        // Use thread-safe Struct-based singleton until 
        // static class constants are possible
        class var sharedInstance: ServiceLocator {
            struct Static {
                static let instance: ServiceLocator = ServiceLocator()
            }
            return Static.instance
        }
        
        var managedObjectContext: NSManagedObjectContext?
        
        class func boxRepository() -> BoxRepository {
            return sharedInstance.boxRepository()
        }
        
        func boxRepository() -> BoxRepository {
            assert(managedObjectContext != nil, "managedObjectContext must be set up")
            return CoreDataBoxRepository(managedObjectContext: managedObjectContext!)
        }
    }

It's not very sophisticated, but it is enough to decouple the layers. An **Application Service** could now perform insertions like this:

    public func provisionBox() -> BoxId {
        let repository = ServiceLocator.boxRepository()
        let boxId = repository.nextId()
        let box = Box(boxId: boxId, title: "A Default Title")
        
        repository.addBox(box)
        
        return boxId
    }

This is not a command-only method because it returns a value. Instead of returning the new ID so the view can add it to the node, the service will be responsible for actually adding the node to the view. That'd be the first major refactoring.

It's about time to leave the early set-up phase and enter Part II, where I'm going to deal with all these details.

<!--ct: commit #cf861676e8ce37ec13bce12999f7e778f2ce081d-->