## Functional Testing Helps Transition to Adding Real Features

I'm pretty confident the view does what it should do. It's all just basic stuff still, although it took enough trial & error to reach this point. (I am talking about you, [explicit Cocoa Bindings](#x20141124163838) which break the view's behavior!)

There are two steps I could take now to quench my curiosity.

First, verify that view-model updates result in visible `NSOutlineView` updates. Since the data doesn't change behind the scenes, I'm eager to see Cocoa Bindings in action. Then again, I already tested such a thing in another app: I changed the title behind with a timer after a couple of seconds. It felt like magic. Key-Value Observing is doing a lot of the hard work here. I can assure you that the Cocoa Bindings are set up correctly. There's no gain in testing Apple's internal frameworks, so I don't do anything in this direction.

Second, I could add functional tests to the test harness. And this is what I'll do: in a fashion you usually find with Behavior-Driven Development (as opposed to Test-Driven Development, where you start at the innermost unit level), I'll add a failing test which will need the whole app to work together in order to pass. It's a test which is going to be failing for quite a while.

In the past I wrote failing functional tests for web applications only because they would drive out the REST API or user interaction pretty well. I haven't tried this for iOS or Mac applications, yet. So let's do this.

If you work by yourself, I think it's okay to check in your code with a failing test as long as it's guiding development. Don't check in failing unit tests just because you can't figure out how to fix the problem immediately.

Having a failing functional test at all may not be okay with your team mates, though. After all, your versioning system should always be in a valid state, ready to build and to pass continuous deployment. Better not check in the failing test itself, then, or work on a local branch exclusively until you rebase your commit history when your feature is ready.


### First Attempt at Capturing the Expected Outcome

I want to go from user interface down to Core Data. That's a first step. This is the test I came up with:

    func testAddFirstBox_CreatesBoxRecord() {
        // Precondition
        XCTAssertEqual(repository!.count(), 0, "repo starts empty")
        
        // When
        viewController.addBox(self)
    
        // Then
        XCTAssertEqual(repository!.count(), 1, "stores box record")
        XCTAssertEqual(allBoxes()!.first!.title, "New Box")
    }

There's room for improvement: I expect that there's a record with a given `BoxId` afterwards, and that the view model contains a `BoxNode` with the same identifier. This is how the view, domain, and Core Data stay in sync. But the naive attempt is hideous:

{linenos=off}
    viewController.itemsController.arrangedObjects.childNodes!!.first.boxId

I rather defer such tests until later to avoid these train wreck-calls.

### Making Optionals-based Tests Useful

On a side note, I think Swift's optionals are making tests weird. Consider this line:

{linenos=off}
    XCTAssertEqual(allBoxes()!.first!.title, "New Box")

`allBoxes()` is of kind `() -> [ManagedBox]?`, that is, it returns an array or nil. To use it this way was pretty straightforward in Objective-C:

{linenos=off}
    func allBoxes() -> [ManagedBox]? {
        let request = NSFetchRequest(entityName: ManagedBox.entityName())
        return context.executeFetchRequest(request, error: nil) as? [ManagedBox]
    }

The thing is, force-unwrapping a `nil` optional results in a runtime error. Objective-C would've told us that "nil doesn't equal whatever". Swift won't. 

With Swift 1.2, you have to decide how to cast the result of the fetch request:

- `as! [ManagedBox]?`, indicating you expect (!) an optional array, or
- `as? [ManagedBox]`, indicating it may be a ManagedBox array or something else entirely, but if it isn't, return nil.

I think the second version fits the purpose better, although the first one expresses the intent clearly, too. I read `as?` as "maybe", so it becomes "maybe return an array of `ManagedBox` objects", which is good.

Now take care of the optional array return value in the test case:

{linenos=off}
    if let boxes = allBoxes() {
        XCTAssertEqual(boxes.first!.title, "New Box")
    }

What if the fetch request was valid, but the result set empty?

{linenos=off}
    if let boxes = allBoxes() {
        if let box = boxes.first as? ManagedBox {
            XCTAssertEqual(box.title, "New Box")
        }
    }

We've surpassed runtime errors but end up not testing the `else` case anymore.

{linenos=off}
    if let boxes = allBoxes() {
        if let box: ManagedBox = allBoxes().first {
            XCTAssertEqual(box.title, "New Box")
        } else {
            XCTFail("no boxes found")
        }
    } else {
        XCTFail("boxes request invalid")
    }

Now that's become quite a monster.

An alternate approach is to change `allBoxes()` to `() -> [ManagedBox]!` to get rid of at least the first clause. Swift teaches us to stop using optionals when we're positive we don't need them. Instead of `nil`, return an empty array. This makes the result much more predictable for the client. Here's the updated version:

{title="Don't allow optionals if there's no need to"}
    func allBoxes() -> [ManagedBox] {
        let request = NSFetchRequest(entityName: ManagedBox.entityName())
        let results: [AnyObject]? = \
            context.executeFetchRequest(request, error: nil)
        
        if let boxes = results as? [ManagedBox] {
            return boxes
        }
        
        return []
    }

It's still unsafe to force-unwrap `first!` when the array is empty.

I'd love to create my own assertion shorthand for this and call `XCTFail` in the case of runtime errors -- but I can't actually catch runtime errors in Swift. Very unfortunate. I wonder how Apple herself writes tests under such limitations.

I end up having to use a very explicit version:

{linenos=off}
    let box: ManagedBox = allBoxes().first
    XCTAssert(box != nil)
    if let box = box {
        XCTAssertEqual(box.title, "New Box")
    }

This pattern feeld more clunky, but once you get used to it, it's okay (and the best alternative there is). You obtain an optional, assert that it contains a value, and then shadow-unwrap the optional inside the scope of the `if` statement's block where you can create assertions about its contents. 

### Wire-framing the Path to "Green"

Now the test fails, of course.

In broad sketches, this is what's left to do to connect the dots:

* I have to make a repository available to the view. I'll do this via **Application Service**s.
* I have to add an actual Application Service layer. Remember, this is the client of the domain.
* The Application Service will issue saving `Box`es and `Item`s without knowing about Core Data.
* I need a service provider of sorts. Something somewhere has to tell the rest of the application that `CoreDataBoxRepository` is the default `BoxRepository` protocol implementation. The process of setting this up takes place in the application delegate, but there's a global `ServiceLocator` singleton missing to do the actual look-up.
* I may need to replace the `ServiceLocator`'s objects with test doubles.

The `ServiceLocator` can look like this:

{title="ServiceLocator singleton to select default implementations"}
    class ServiceLocator {
        // Use thread-safe Struct-based singleton until 
        // static class constants are possible
        class var sharedInstance: ServiceLocator {
            struct Static {
                static let instance: ServiceLocator = ServiceLocator()
            }
            return Static.instance
        }
        
        var managedObjectContext: NSManagedObjectContext?
        
        class func boxRepository() -> BoxRepository {
            return sharedInstance.boxRepository()
        }
        
        func boxRepository() -> BoxRepository {
            let moc = managedObjectContext
            precondition(moc != nil, "managedObjectContext must be set up")
            return CoreDataBoxRepository(managedObjectContext: moc!)
        }
    }

It's not very sophisticated, but it is enough to decouple the layers. An Application Service could now perform insertions like this:

    public func provisionBox() -> BoxId {
        let repository = ServiceLocator.boxRepository()
        let boxId = repository.nextId()
        let box = Box(boxId: boxId, title: "A Default Title")
        
        repository.addBox(box)
        
        return boxId
    }

This is not a command-only method because it returns a value. Instead of returning the new ID so the view can add it to the node, the service will be responsible for actually adding the node to the view. That'd be the first major refactoring.[^cf861676e8ce37ec13bce12999f7e778f2ce081d]
<!--ct: commit #cf861676e8ce37ec13bce12999f7e778f2ce081d-->

It's about time to leave the early set-up phase and enter Part II, where I'm going to deal with all these details.

[^cf861676e8ce37ec13bce12999f7e778f2ce081d]: See [commit cf86167](https://github.com/DivineDominion/mac-appdev-code/commit/cf861676e8ce37ec13bce12999f7e778f2ce081d)
