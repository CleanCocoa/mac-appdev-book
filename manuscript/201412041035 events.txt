## Introducing Events in Place of Notifications {#domainevents}

Using `NSNotificationCenter` is easy and a well-known practice. I don't like how working with a notifications `userInfo` dictionary changed with Swift and its enforcement of strong typing.

### Swift is sticking your head right at the problems

In Objective-C, I'd send and access the "Box was created" event info like this:

{linenos=off}
    // Sending
    NSDictionary *userInfo = @[@"boxId": @(boxId.identifier)]
    [notificationCenter postNotificationName: kBoxProvisioned,
                                      object: self,
                                    userInfo: userInfo]
    
    // Receiving
    int64_t identifier = notification.userInfo["boxId"].longLongValue
    [BoxId boxIdWithIdentifier: identifier]

To get this deep in Swift, I have to do this instead:

{linenos=off}
    // Sending
    let userInfo = ["boxId" : NSNumber(longLong: boxId.identifier)]
    notificationCenter.postNotificationName(kBoxProvisioned, 
        object: self, userInfo: userInfo)
    
    // Receiving
    let boxInfo = notification.userInfo!["boxId"] as! NSNumber
    let boxId = BoxId(boxInfo.longLongValue)

I settled for sending IDs only because putting ID and title makes things complicated for the "Item was created" event. There, I'd have to use nested dictionaries. A JSON representation would look like this:

{title="JSON representation of the event data", linenos=off, lang=json}
    {
        box: {
            id: ...
        }
        item: {
            id: ...
            title: "the title"
        }
    }

Accessing nested dictionaries in Swift is even worse, though, so I settled with supplying two IDs only. On the downside, every client now has to fetch data from the repository to do anything with the event. That's nuts.

The relative pain Swift imposes highlights possible problems: there could be no `userInfo` at all, there could be no value for a given key, and there could be a different kind of value than you expect. Even more so with nested dictionaries of the type `[NSObject : AnyObject]`.

It's almost always a bad idea to simply assume that the event publisher provided valid data in dictionaries. What if the dictionary keys change but you didn't notice in the client? Defining constants remedies the problem a bit. 

You have to perform sanity checks to catch invalid events anyway, in Objective-C just as much as in Swift.

Using real event objects will work wonders. Serializing them into dictionaries and de-serializing `userInfo` into events will encapsulate the sanity checks and provide usable interfaces tailored to each event's use.

{pagebreak}


### Event Value Types

An event should be a value type, and thus a struct. It assembles a `userInfo` dictionary. For `NSNotificationCenter` convenience, it also assembles a `NSNotification` object:

{title="Domain Event serializing itself into userInfo dictionary"}
    // Provide a typealias for brevity and readability
    typealias UserInfo = [NSObject : AnyObject]
    
    struct BoxProvisionedEvent: DomainEvent {
    
        static let eventName = "Box Provisioned Event"
    
        let boxId: BoxId
        let title: String
    
        init(boxId: BoxId, title: String) {
            self.boxId = boxId
            self.title = title
        }
    
        init(userInfo: UserInfo) {
            let boxIdData = userInfo["id"] as! NSNumber
            self.init(boxId: BoxId(boxIdData), title: userInfo["title"] as! String)
        }
    
        func userInfo() -> UserInfo {
            return [
                "id": NSNumber(longLong: boxId.identifier),
                "title": title
            ]
        }
    }

When publishing an event, these properties are used in a free `notification(_:)` function:

{linenos=off}
    func notification<T: DomainEvent>(event: T) -> NSNotification {
        return NSNotification(name: T.eventName, object: nil, userInfo: event.userInfo())
    }

The underlying protocol is really simple:

{linenos=off}
    protocol DomainEvent {
        /// The `DomainEventType` to identify this kind of DomainEvent
        static var eventName: String { get }

        init(userInfo: UserInfo)
        func userInfo() -> UserInfo
    }

With the advent of protocol extensions in Swift 2.0, it would be possible to provide a default `notification()` method on `DomainEvent` instead. But why would anyone override that, except maybe during tests? So I left it as it is.

A domain event should also de-serialize from existing `userInfo` data. Unwrapping the dictionary is trivial.

Now `BoxProvisionedEvent` wraps the `NSNotification` in something more meaningful. It also provides convenient accessors to its data, the ID and title of the newly created box. That's good for slimming-down the subscriber: no need to query the repository for additional data.

With the changes in place, the `DisplayBoxesAndItems` Application Service now does no more than this: 

    class DisplayBoxesAndItems {
        func subscribe() {
            let mainQueue = NSOperationQueue.mainQueue()
        
            boxProvisioningObserver = publisher.subscribe(
                    BoxProvisionedEvent.self, queue: mainQueue) {
                [weak self] event in

                let boxData = BoxData(boxId: event.boxId, title: event.title)
                self?.consumeBox(boxData)
            }
            
            // ...
        }
        
        func consumeBox(boxData: BoxData) {
            if let consumer = self.consumer {
                consumer.consume(boxData)
            }
        }
        
        // ...
    }

The `subscribe` method is interesting. Thanks to [Swift generics][generics], I can specify an event type using `TheClassName.self` and pipe it through to the specified block to easily access the values.

The conversion of `NSNotification` to the appropriate domain event takes place in the `DomainEventPublisher`:

    func subscribe<T: DomainEvent>(eventKind: T.Type, 
        queue: NSOperationQueue, 
        usingBlock block: (T!) -> Void) -> DomainEventSubscription {
        
        let eventName: String = T.eventName
        let observer = notificationCenter.addObserverForName(eventName, 
            object: nil, queue: queue) {
            notification in
            
            let userInfo = notification.userInfo!
            let event: T = T(userInfo: userInfo)
            block(event)
        }
        
        return DomainEventSubscription(observer: observer, eventPublisher: self)
    }

It takes some getting used to Swift to read this well. I'll walk you through it.

Let's stick to the client code from above and see what subscribing to `BoxProvisionedEvent`s does:

* The type of the `eventKind` argument should the type (not instance!) of a descendant of `DomainEvent`. That's what `BoxProvisionedEvent.self` is. You don't pass in an actual event, but it's class (or "type"). Interestingly, this value is of no use but to set `T`, the generics type placeholder.
* The `block` (line 3) yields an event object of type `T` (which becomes an instance of `BoxProvisionedEvent`, for example)
* The `eventName` (line 4) will be, in this example case, `Box Provisioned Event`. `DomainEvent`s have a property called `eventName` to return a string which becomes the notification name.
* The actual observer is a wrapper around the `block` specified by the client. The wrapper creates an event of type `T`. All `DomainEvent`s must provide the deserializing initializer `init(userInfo: [NSObject : AnyObject])`, and so does `T`:
    
When a `BoxProvisioned` event is published, it is transformed into a `NSNotification`. The notification is posted as usual. The wrapper around the client's subscribing block receives the notification, de-serializes a `BoxProvisioned` event again, and provides this to the client.

`DomainEventSubscription` is a wrapper around the observer instances `NSNotificationCenter` produces. This wrapper unsubscribes upon deinit automatically, so all you have to do is store it in an attribute which gets nilled-out at some point.

It took some trial and error to get there, but it works pretty well.[^d0a8c7b56296961a662bd1681b134dfe550adfff]

<!--ct: commit
#d0a8c7b56296961a662bd1681b134dfe550adfff use real DomainEvents instead of notifications
#9a8f41d29b1bd48eb1d6f7475699da0d0d925c2b add TestDomainEventPublisher and NullNotificationCenter for isolating tests
#a2b0f4c578abbe4407d5cc06b7fc423472cb8151 test ProvisioningService sending domain events
#74cf8041d561e6ecbe696dbb8f9c5d6046005405 refactor code for domain events
-->

[^d0a8c7b56296961a662bd1681b134dfe550adfff]: See the [latest commit](https://github.com/DivineDominion/mac-appdev-code/commit/3c8ff3835df3c8262833ff9944dedf81aa7d4e94), or the initial [commits d0a8c7b](https://github.com/DivineDominion/mac-appdev-code/commit/d0a8c7b56296961a662bd1681b134dfe550adfff),  [9a8f41d](https://github.com/DivineDominion/mac-appdev-code/commit/9a8f41d29b1bd48eb1d6f7475699da0d0d925c2b),  [a2b0f4c](https://github.com/DivineDominion/mac-appdev-code/commit/a2b0f4c578abbe4407d5cc06b7fc423472cb8151), and [74cf804](https://github.com/DivineDominion/mac-appdev-code/commit/74cf8041d561e6ecbe696dbb8f9c5d6046005405)

[generics]: http://swiftyeti.com/generics/

