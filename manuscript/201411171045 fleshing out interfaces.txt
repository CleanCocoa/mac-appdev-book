## Introduce Repository and Its Collaborators for Tests

`Box` and `Item` objects will each have their own IDs. To make my life easier, IDs will be unique random 64-bit integers. Each new ID has to be checked against the pool of existing objects to achieve uniqueness. That's the responsibility of a Repository.

To test that the Repository does return unique IDs, we have to test that it first checks a random ID against the pool of existing ones, and then generates new ones until the generated ID is free.

I> As I said earlier, all of this ID generation could fit nicely into an `IdentityService` instead. That will make the Repository do one thing less, so the code will adhere more to the _Single Responsibility Principle_. That's not an end in itself, though: splitting the concerns may introduce further problems. Leaving it in the Repository makes things easier, since the concrete Repository knows how to find out if an ID is used already anyhow.

Let's say `nextId()` shall return a unique ID. `integerId()` then is a private method to generate an ID which `nextId()` has to check for uniqueness.

To test this with a replacement ID generator, you can do the following:

1. Take two pre-defined IDs in your test.
2. Make the ID generator return the first ID on the first call, the second ID on each consecutive call.
3. Use the faux ID generator in the Repository. Also make it so that the first ID is known to be existing.
3. Call `nextId()` on the Repository only once and assume that the second ID is returned, thus verifying that the Repository does check the ID generator's results and tries again.

I would've wanted to override the ID generating method `integerId()` in a test Repository subclass. When I create subclasses of my own classes in tests, though, the subclasses can only override methods which are public, since the tests reside in another module than the application itself. This way, overriding private methods is not an option to change the behavior of a class. Weirdly enough, it worked well in Objective-C.

Now that I have to think of my code as a module with a public interface, the old testing strategies involving method overrides have to be solved differently.[^extrant]

[^extrant]: Michael C. Feathers calls the following dependency breaking technique "Extract Interface" in his book _Working Effectively with Legacy Code_. See the [book list](#booklist) for details.


I want to ensure the repository generates IDs until an ID is free. Duplicates are not allowed. I could still override the `integerId()` method and make it public:

    // Source module
    public class CoreDataItemRepository: NSObject, ItemRepository {
        // ...
        
        public func nextId() -> ItemId {
            return ItemId(integerId())
        }

        public func integerId() -> IntegerId {
            // return random 64-bit integer
        }
    }

    // Test module
    class TestRepository : CoreDataItemRepository {
        override func integerId() -> IntegerId {
            // Return ID1 on first call, ID2 on consecutive calls
        }
    }

With this `TestRepository` in hand, I can reserve `ID1` and test that the rest of the default repository implementation ensures another attempt is made at finding a free ID.

Making ID-generation public is a bad idea, though. It's an implementation detail of the Repository I don't want to expose. When dealing with legacy code, sometimes you have no choice but alter the public interface of a class and promise to yourself to not violate certain rules. We're not dealing with legacy code, though. Let's aim for a clean API.


{pagebreak}

First, recognize ID generation as a distinct responsibility and extract it into its own interface:

{linenos=off}
    public protocol GeneratesIntegerId {
        func integerId() -> IntegerId
    }

Provide a default but private implementation. I used `struct` instead of `class` because there's no _state_ associated with this object. It's simply an object with a single method, no state, no past, and no dependencies:

{linenos=off}
    struct DefaultIntegerIdGenerator: GeneratesIntegerId {
        func integerId() -> IntegerId {
            // return random 64-bit integer
        }
    }

The `CoreDataItemRepository`'s interface doesn't have to change unless needed. Simply create another designated initializer and mark the old one as a "convenience" initializer:

{title="Repository using ID generator object which can be stubbed in tests"}
    public class CoreDataItemRepository: NSObject, ItemRepository {
        let managedObjectContext: NSManagedObjectContext
        let integerIdGenerator: GeneratesIntegerId
    
        public convenience init(managedObjectContext: NSManagedObjectContext) {
            self.init(managedObjectContext: managedObjectContext, 
                integerIdGenerator: DefaultIntegerIdGenerator())
        }
    
        public init(managedObjectContext: NSManagedObjectContext, 
                integerIdGenerator: GeneratesIntegerId) {
            self.managedObjectContext = managedObjectContext
            self.integerIdGenerator = integerIdGenerator
        
            super.init()
        }
    
        // ...
    
        public func nextId() -> ItemId {
            return ItemId(unusedIntegerId())
        }
    
        func unusedIntegerId() -> IntegerId {
            var identifier: IntegerId
        
            do {
                identifier = integerId()
            } while integerIdIsTaken(identifier)
        
            return identifier
        }
    
        func integerId() -> IntegerId {
            return integerIdGenerator.integerId()
        }
    
        func integerIdIsTaken(identifier: IntegerId) -> Bool {
            // check if an entity with the identifier is already present
        }
    }


{pagebreak}

Now I can provide a test generator which helps to verify the Repository's behavior:

    class TestIntegerIdGenerator : NSObject, GeneratesIntegerId {
        let firstAttempt: IntegerId = 1234
        let secondAttempt: IntegerId = 5678
        var callCount = 0
    
        func integerId() -> IntegerId {
            let identifier = (callCount == 0 ? firstAttempt : secondAttempt)
        
            callCount++
        
            return identifier
        }
    }

And here's the test which puts the test generator into place via Dependency Injection (which, in this case, means we pass the generator to the Repository initializer):

    func testNextId_WhenGeneratedIdIsTaken_ReturnsAnotherId() {
        let testGenerator = TestIntegerIdGenerator()
        repository = CoreDataItemRepository(managedObjectContext: self.context, 
            integerIdGenerator: testGenerator)
        let existingId = ItemId(testGenerator.firstAttempt)
        ManagedItem.insertManagedItem(existingId, title: "irrelevant", 
            inManagedObjectContext: self.context)
        
        let itemId = repository!.nextId()
        
        let expectedNextId = ItemId(testGenerator.secondAttempt)
        XCTAssertEqual(itemId, expectedNextId, 
            "Should generate another ID because first one is taken")
    }

Strangely enough, I have the impression that Swift forces me to make good decisions design-wise, while I expect more experienced Cocoa developers to consider all of this backward, or ugly. I expect them to think this is all too much like Java: create a lot of interfaces (format protocols) and service objects and stuff like that.

The code benefits from small, stateless objects like these. They make the model richer and keep the interface lean.
