# Motivation to Write This Book

Hi, I'm Christian and I develop [the Word Counter for Mac][wcapp]. It's my first big Mac application, and I charge money for a license, which makes me nervous. 

Recently, I wanted to use Core Data to store a new kind of data. That poses some challenges for those of us who keep an eye or two on their architecture. This little book and the accompanying project document my explorations and a possible solution.

Selling my app makes me nervous because I suddenly feel obliged to deliver the best software possible. It should be stable. But it should also grow: I want to deliver updates, and thus I need to change the code. Changes shouldn't break existing code -- at least not without me noticing. Therefore I want to write the best code I can in order to make changes easy and to deliver the best working software I'm able to produce.

That's a lot of pressure. I grew more comfortable with it when my confidence in the code grew.

## Untangling Cocoa from the App

So now it's fall 2014. I want to add a new feature to the Word Counter.

Until now, the Word Counter observed key presses and increased interal counters to track words written per app. This is indented to show your overall _productivity_. But it can't show _progress_, another essential metric. So up next was the ability to monitor files to track project progress.

This innocent feature includes a lot of design changes:

* Introduce `Project`s and associate `Path`s with them. The domain has to know how to track progress for this new kind of data.
* Add background-queue file monitoring capabilities. Thanks to _Grand Central Dispatch_, this is supposed to be quite easy. I have to create wrappers nevertheless to provide an API for clean code, though.
* Design new user interface components to manage projects and their paths.
* Store daily `PathRecord`s to keep track of file changes over a long period of time. Without records, no history. Without history, no analysis.
* Make the existing productivity history view aware of `Project` progress.

In the past, I stored the application-specific daily records in `.plist` files. They were easy to set up and get started. But they don't scale very well. After some time, parsing the file will become increasingly slow.

That's when I decided to use either a SQLite library or opt-in to Core Data to represent `Project` data. I decided to use Core Data because it's so convenient to use.

[wcapp]: http://wordcounterapp.com

## Challenges

I didn't have any experience displaying data using `NSOutlineView`s. I didn't have a lot of experience with Core Data. I couldn't copy too much of existing code to glue the user interface to existing data because the user wasn't able to set up a lot in the app until then.

All in all, most of the design decisions and their requirements were news to me.

I fiddled around with providing data to `NSOutlineView` via `NSTreeController` until appending projects to the list and adding paths to them would work as soon as the actual infrastructure were put in place.

Now add Core Data to the equation.

What a mess!

It's super convenient to use Core Data because the framework takes care of a lot. If you want to manipulate persistent objects easily, you can ever wire `NSObjectController` objects to Core Data entities and skip _all of the object creation boilerplate code._  For example, an `NSTreeController` can take care of displaying nested data in an `NSOutlineView`, adding items relative to the user's current selection for example.

If you adhere to the limitations of an `NSTreeController`, that is.

Unfortunately, users of the Word Counter will edit two kinds of objects, not one: `Path`s may only be nested below `Project`s, which in turn are strict root level objects. I have to enforce these rules myself, and I have to add objects to the tree from my own code. I don't know about a lot of use cases where boilerplate code won't be necessary at all.

To tie Core Data entities (or `NSManagedObject` subclasses for that matter) to the user interface is so convenient because it skips all of the layers in between. No view controller, no custom domain objects. This means, in turn, to couple the user interface to the data representation. In other words, the user-facing windows are directly dependent on the database. This may be a clever short cut, but this might also be the reason why your app is getting hard to change and hard to test.

The data representation should stay an implementation detail. I may want to switch from Core Data to a SQLite library later on. There have to be intermediary layers to achieve this.

In short, using Core Data in the most convenient way violates a lot of the principles I learned to adhere to. These principles help me keep the Word Counter code base clean and maintainable.

The basic architecture I want to advocate is sometimes called "[Clean Architecture][cleanar]", sometimes "[Hexagonal][hexagonal]". There a differences between these two, but I won't be academic about this. This little book will present you my interpretation on these things first and point you into the right direction to find out more afterwards.

Keep in mind I am still making sense of this myself. I bet I get a concept or two wrong.

That's why you may feel free to contribute to this book and the project via GitHub:

- [Book Manuscript on GitHub](https://github.com/DivineDominion/mac-appdev-book)
- [Project Code on GitHub][bookcode]

I hope reading this book will be as useful to you as writing it was to me.

[bookcode]: https://github.com/DivineDominion/mac-appdev-code
[cleanar]: http://blog.8thlight.com/uncle-bob/2012/08/13/the-clean-architecture.html
[hexagonal]: http://alistair.cockburn.us/Hexagonal+architecture