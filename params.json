{"name":"Exploring Mac App Development Strategies","tagline":"Patterns & Best Practice for Clean Software Architecture on the Mac with Swift and Tests","body":"# Buy the Book\r\n\r\nI wrote and released a book called \"Exploring Mac App Development Strategies\" which helps developers design reusable code and untangle Core Data from their app, for example.\r\n\r\n**[Get the book from Leanpub at $9.99](https://leanpub.com/develop-mac-apps-clean-architecture-swift)** or name your price.\r\n\r\n\r\n\r\n## Core Ideas and Theses\r\n\r\nHere's the core ideas I want to share with you and have your feedback on:\r\n\r\n1. Apple's Core Data is a very invasive framework. It works best when you couple everything, beginning at the user interface, to Core Data entities. Cocoa Bindings make a lot of the magic possible, but they come at a cost: the Core Data entities (or `NSManagedObject` subclasses, for that matter) are bound to do a lot of different things for different \"clients\", wheras by 'client' I mean consuming views, background services, and the like. It'd be easier to maintain the code if you model entities for each \"[Bounded Context](http://martinfowler.com/bliki/BoundedContext.html)\" separately.\r\n2. Adopting Domain-Driven Design thinking, small service objects are favorable. It's easy to create Data Transfor Objects in Swift using `struct`s, for example. Core Data should be pushed outside the domain (i.e. where the business logic is hosted) and become an implementation detail.\r\n3. Once you free your app from the entanglement by Core Data (and other Apple suggested best practices which don't scale well), you will be able to leverage powerful design patterns. I created domain event wrappers around `NSNotification` to make event handling easier and failure-proof. Using events to propagate changes (instead of using Bindings, for example) makes concurrent programming easier.\r\n\r\n\r\n# Download the Book\r\n\r\nYou can look at the manuscript for free. In fact, you can even change it to your liking and re-distribute it.\r\n\r\nThe book is licensed under the Creative Commons Attribution-ShareAlike 4.0 International License. To view a copy of this license, visit http://creativecommons.org/licenses/by-sa/4.0/ or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\r\n\r\n## Outline\r\n\r\n* Introduction, and my motivation to document the process\r\n* Part 1: Bootstrapping\r\n    * Getting comfortable with Swift, porting Objective-C code to recreate the problem space\r\n    * Get Core Data and related tests running\r\n    * Prepare the user interface in its own layer\r\n    * Have tests in place for the app's domain\r\n* Part 2: Solving the actual problem\r\n    * My first, naive take\r\n    * Ports & Adapters-style solution\r\n* Part 3: Putting a Domain in Place\r\n    * Sending Domain Events\r\n    * Handling Errors\r\n    * Doing real work in the background\r\n* Part 4: _Using Core Data for Convenience (Upcoming!)_\r\n* Epilogue\r\n* Appendix\r\n    * Interesting links\r\n    * On Swift\r\n    * About Objective-C API compliance-related problems\r\n\r\n# Contact\r\n\r\nI'd love to hear what you think! Just [drop me a line](http://christiantietze.de/about) or find me on the web here:\r\n\r\n* Twitter: [@ctietze](http://twitter.com/ctietze)\r\n* Web: [christiantietze.de](http://christiantietze.de)\r\n\r\n## Contributing\r\n\r\nFeel free to contribute to the book and the project via GitHub:\r\n\r\n- [Book Manuscript on GitHub][bookman]\r\n- [Project Code on GitHub][bookcode]\r\n\r\n[bookman]: https://github.com/DivineDominion/mac-appdev-book\r\n[bookcode]: https://github.com/DivineDominion/mac-appdev-code\r\n\r\n# More Reading\r\n\r\n## Interesting Links\r\n\r\n* [SourceView sample code (Objective-C)](https://developer.apple.com/library/mac/samplecode/SourceView/Listings/BaseNode_m.html#//apple_ref/doc/uid/DTS10004441-BaseNode_m-DontLinkElementID_6): Example application by Apple where `NSOutlineView` is used. Good for getting started, although the example app doesn't run properly anymore -- I don't see any images in the source view.\r\n* [Clean Architecture](http://blog.8thlight.com/uncle-bob/2012/08/13/the-clean-architecture.html): Uncle Bob's explanation of the architectural concepts I tried to adhere to. Goes beyond Hex\r\n* [Architecture -- The Lost Years (Video)](https://www.youtube.com/watch?v=WpkDN78P884): This talk introduced me to Hexagonal and Clean Architecture.\r\n* [Avdi Grimm: Objects on Rails](http://objectsonrails.com): A free e-book which taught me how to decouple my application from Ruby on Rails. This one got me hooked on thinking past using the framework properly.\r\n\r\n\r\n## Interesting Books\r\n\r\nI recommend reading the following books, ordered by subjective significance to the topic. The top four are really worth your money, so I added amazon affiliate links to them. If you buy from these links, I get a small kick-back from amazon. It won't cost you anything, though.\r\n\r\n* **Vaughn Vernon (2013):  _[Implementing domain driven design](http://www.amazon.com/gp/product/0321834577/ref=as_li_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=0321834577&linkCode=as2&tag=macappdev-20&linkId=T5QYTXVZBTZ2VZPU)_, Upper Saddle River, NJ: Addison-Wesley.**\r\n    \r\n    — Lots of practical examples and explanation for the patterns Evans laid out.\r\n* **Eric Evans (2006):  _[Domain-Driven Design. Tackling complexity in the heart of software](http://www.amazon.com/gp/product/0321125215/ref=as_li_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=0321125215&linkCode=as2&tag=macappdev-20&linkId=2HZ546ZCPKZ47SQQ)_, Upper Saddle River, NJ: Addison-Wesley.**\r\n    \r\n    — Full of good examples and refactorings itself but a little light on actually solving implementation problems.\r\n* **Michael C. Feathers (2011):  _[Working effectively with legacy code](http://www.amazon.com/gp/product/0131177052/ref=as_li_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=0131177052&linkCode=as2&tag=chritietwork-20&linkId=VHKZJPCXDDHJK7X7)_, Upper Saddle River, NJ: Prentice Hall Professional Technical Reference.**\r\n    \r\n    — Helps to learn decoupling code incrementally and how to test hard-to-test parts. That's where I learned to provide means to reset singletons, and that it's better to wrap `NSNotificationCenter` in order to replace the wrapper in tests than not test notifications at all.\r\n* **Steve Freeman and Nat Pryce (2010):  _[Growing object-oriented software, guided by tests](http://www.amazon.com/gp/product/0321503627/ref=as_li_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=0321503627&linkCode=as2&tag=macappdev-20&linkId=5FQWUPZJHWVNLAD6)_, Boston: Pearson Education.**\r\n    \r\n    — This book has taught me so much about Test-Driven Development! I figured out when to use functional tests, why it's beneficial to start with a failing test on the system level to guide development, and how to create multi-layered applications with test fakes all thanks to this book.\r\n* **Ivar Jacobson, Magnus Christerson, Patrik Jonsson, and Gunnar Övergaard (1990):  _Object-Oriented Software Engineering. A Use Case Driven Approach_, Wokingham: Addison-Wesley.**\r\n    \r\n    — Actually a recommendation by Uncle Bob in _Architecture: The Lost Years_. It taught me to think about application services and use case objects. The book's focus is on architecture, not on code. Useful practices. You may get this one used for a few dollars. I found it in my local university's library.\r\n* Scott Millett (2014):  _Practicing Domain-Driven Design. Practical advice for teams implementing the development philosophy of Domain-Driven Design. With code examples in C# .NET_, Scott Millett.\r\n* Robert C. Martin (2009):  _Clean Code. A Handbook of Agile Software Craftsmanship_, Upper Saddle River: Prentice Hall.\r\n* Andy Oram and Greg Wilson (Eds.) (2007):  _Beautiful Code_, Beijing: O'Reilly.\r\n* Sandi Metz (2013):  _Practical object-oriented design in Ruby: an agile primer_, Upper Saddle River, NJ: Addison-Wesley.\r\n    \r\n    — A really good read. Sadly, it's about Ruby, not about Swift or Objective-C, but you may want to peek into it anyway.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}